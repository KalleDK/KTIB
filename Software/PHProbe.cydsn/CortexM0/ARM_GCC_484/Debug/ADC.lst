ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00050000 		.word	1280
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 2


  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000500u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 141 0
  98 000e 4F4B     		ldr	r3, .L15
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 4D4B     		ldr	r3, .L15+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 4D4B     		ldr	r3, .L15+8
 108 0020 4D4A     		ldr	r2, .L15+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 4D4B     		ldr	r3, .L15+16
 112 0026 4E4A     		ldr	r2, .L15+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 4E4B     		ldr	r3, .L15+24
 116 002c 4E4A     		ldr	r2, .L15+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 4E4B     		ldr	r3, .L15+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 4E4B     		ldr	r3, .L15+36
 124 0038 4E4A     		ldr	r2, .L15+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 4E4B     		ldr	r3, .L15+44
 128 003e 4D4A     		ldr	r2, .L15+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 6


 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 130              		.loc 1 162 0
 131 0042 4E4B     		ldr	r3, .L15+48
 132 0044 0022     		mov	r2, #0
 133 0046 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 134              		.loc 1 163 0
 135 0048 4D4B     		ldr	r3, .L15+52
 136 004a 0022     		mov	r2, #0
 137 004c 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 138              		.loc 1 164 0
 139 004e 4D4B     		ldr	r3, .L15+56
 140 0050 0122     		mov	r2, #1
 141 0052 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 142              		.loc 1 167 0
 143 0054 4C4B     		ldr	r3, .L15+60
 144 0056 0222     		mov	r2, #2
 145 0058 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 146              		.loc 1 171 0
 147 005a 4C4B     		ldr	r3, .L15+64
 148 005c 1B68     		ldr	r3, [r3]
 149 005e 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 150              		.loc 1 172 0
 151 0060 7A68     		ldr	r2, [r7, #4]
 152 0062 4B4B     		ldr	r3, .L15+68
 153 0064 1340     		and	r3, r2
 154 0066 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 155              		.loc 1 178 0
 156 0068 7B68     		ldr	r3, [r7, #4]
 157 006a 0122     		mov	r2, #1
 158 006c 1343     		orr	r3, r2
 159 006e 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 7


 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 160              		.loc 1 191 0
 161 0070 464B     		ldr	r3, .L15+64
 162 0072 7A68     		ldr	r2, [r7, #4]
 163 0074 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 164              		.loc 1 197 0
 165 0076 0023     		mov	r3, #0
 166 0078 FB60     		str	r3, [r7, #12]
 167 007a 61E0     		b	.L6
 168              	.L14:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 169              		.loc 1 199 0
 170 007c A023     		mov	r3, #160
 171 007e DA00     		lsl	r2, r3, #3
 172 0080 DC23     		mov	r3, #220
 173 0082 9B01     		lsl	r3, r3, #6
 174 0084 1340     		and	r3, r2
 175 0086 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 176              		.loc 1 218 0
 177 0088 FB68     		ldr	r3, [r7, #12]
 178 008a 9B00     		lsl	r3, r3, #2
 179 008c 414A     		ldr	r2, .L15+72
 180 008e 9B18     		add	r3, r3, r2
 181 0090 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 8


 182 0092 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 183              		.loc 1 220 0
 184 0094 A023     		mov	r3, #160
 185 0096 DA00     		lsl	r2, r3, #3
 186 0098 0123     		mov	r3, #1
 187 009a 1340     		and	r3, r2
 188 009c 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 189              		.loc 1 222 0
 190 009e 374B     		ldr	r3, .L15+48
 191 00a0 364A     		ldr	r2, .L15+48
 192 00a2 1168     		ldr	r1, [r2]
 193 00a4 FA68     		ldr	r2, [r7, #12]
 194 00a6 0120     		mov	r0, #1
 195 00a8 041C     		mov	r4, r0
 196 00aa 9440     		lsl	r4, r4, r2
 197 00ac 221C     		mov	r2, r4
 198 00ae 92B2     		uxth	r2, r2
 199 00b0 0A43     		orr	r2, r1
 200 00b2 1A60     		str	r2, [r3]
 201              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 202              		.loc 1 225 0
 203 00b4 A023     		mov	r3, #160
 204 00b6 DA00     		lsl	r2, r3, #3
 205 00b8 0223     		mov	r3, #2
 206 00ba 1340     		and	r3, r2
 207 00bc 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 208              		.loc 1 227 0
 209 00be 304B     		ldr	r3, .L15+52
 210 00c0 2F4A     		ldr	r2, .L15+52
 211 00c2 1168     		ldr	r1, [r2]
 212 00c4 FA68     		ldr	r2, [r7, #12]
 213 00c6 0120     		mov	r0, #1
 214 00c8 041C     		mov	r4, r0
 215 00ca 9440     		lsl	r4, r4, r2
 216 00cc 221C     		mov	r2, r4
 217 00ce 92B2     		uxth	r2, r2
 218 00d0 0A43     		orr	r2, r1
 219 00d2 1A60     		str	r2, [r3]
 220              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 9


 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 221              		.loc 1 247 0
 222 00d4 A023     		mov	r3, #160
 223 00d6 DA00     		lsl	r2, r3, #3
 224 00d8 8023     		mov	r3, #128
 225 00da 9B00     		lsl	r3, r3, #2
 226 00dc 1340     		and	r3, r2
 227 00de 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 228              		.loc 1 249 0
 229 00e0 8023     		mov	r3, #128
 230 00e2 5B00     		lsl	r3, r3, #1
 231 00e4 BB60     		str	r3, [r7, #8]
 232 00e6 02E0     		b	.L10
 233              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 234              		.loc 1 253 0
 235 00e8 8023     		mov	r3, #128
 236 00ea 5B01     		lsl	r3, r3, #5
 237 00ec BB60     		str	r3, [r7, #8]
 238              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 239              		.loc 1 256 0
 240 00ee A023     		mov	r3, #160
 241 00f0 DA00     		lsl	r2, r3, #3
 242 00f2 8023     		mov	r3, #128
 243 00f4 5B00     		lsl	r3, r3, #1
 244 00f6 1340     		and	r3, r2
 245 00f8 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 246              		.loc 1 263 0
 247 00fa 274B     		ldr	r3, .L15+76
 248 00fc FA68     		ldr	r2, [r7, #12]
 249 00fe 5200     		lsl	r2, r2, #1
 250 0100 0021     		mov	r1, #0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 10


 251 0102 D152     		strh	r1, [r2, r3]
 252 0104 09E0     		b	.L12
 253              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 254              		.loc 1 270 0
 255 0106 BB68     		ldr	r3, [r7, #8]
 256 0108 002B     		cmp	r3, #0
 257 010a 00DA     		bge	.L13
 258 010c 0133     		add	r3, r3, #1
 259              	.L13:
 260 010e 5B10     		asr	r3, r3, #1
 261 0110 99B2     		uxth	r1, r3
 262 0112 214B     		ldr	r3, .L15+76
 263 0114 FA68     		ldr	r2, [r7, #12]
 264 0116 5200     		lsl	r2, r2, #1
 265 0118 D152     		strh	r1, [r2, r3]
 266              	.L12:
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 267              		.loc 1 276 0
 268 011a BB68     		ldr	r3, [r7, #8]
 269 011c 1F4A     		ldr	r2, .L15+80
 270 011e 5343     		mul	r3, r2
 271 0120 1F4A     		ldr	r2, .L15+84
 272 0122 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 273              		.loc 1 277 0
 274 0124 181C     		mov	r0, r3
 275 0126 1D49     		ldr	r1, .L15+80
 276 0128 FFF7FEFF 		bl	__aeabi_idiv
 277 012c 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 278              		.loc 1 276 0
 279 012e 9BB2     		uxth	r3, r3
 280 0130 19B2     		sxth	r1, r3
 281 0132 1C4B     		ldr	r3, .L15+88
 282 0134 FA68     		ldr	r2, [r7, #12]
 283 0136 9200     		lsl	r2, r2, #2
 284 0138 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 285              		.loc 1 197 0
 286 013a FB68     		ldr	r3, [r7, #12]
 287 013c 0133     		add	r3, r3, #1
 288 013e FB60     		str	r3, [r7, #12]
 289              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 290              		.loc 1 197 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 11


 291 0140 FB68     		ldr	r3, [r7, #12]
 292 0142 002B     		cmp	r3, #0
 293 0144 9AD0     		beq	.L14
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 294              		.loc 1 279 0 is_stmt 1
 295 0146 BD46     		mov	sp, r7
 296 0148 05B0     		add	sp, sp, #20
 297              		@ sp needed
 298 014a 90BD     		pop	{r4, r7, pc}
 299              	.L16:
 300              		.align	2
 301              	.L15:
 302 014c 00000000 		.word	ADC_ISR
 303 0150 20001A40 		.word	1075445792
 304 0154 00001A40 		.word	1075445760
 305 0158 70020050 		.word	1342177904
 306 015c 04001A40 		.word	1075445764
 307 0160 F4000080 		.word	-2147483404
 308 0164 18001A40 		.word	1075445784
 309 0168 0000FF07 		.word	134152192
 310 016c 1C001A40 		.word	1075445788
 311 0170 10001A40 		.word	1075445776
 312 0174 04000400 		.word	262148
 313 0178 14001A40 		.word	1075445780
 314 017c 28021A40 		.word	1075446312
 315 0180 38021A40 		.word	1075446328
 316 0184 18021A40 		.word	1075446296
 317 0188 000F1A40 		.word	1075449600
 318 018c 30001A40 		.word	1075445808
 319 0190 FFFFFFDF 		.word	-536870913
 320 0194 80001A40 		.word	1075445888
 321 0198 00000000 		.word	ADC_offset
 322 019c 10270000 		.word	10000
 323 01a0 88130000 		.word	5000
 324 01a4 00000000 		.word	ADC_countsPer10Volt
 325              		.cfi_endproc
 326              	.LFE1:
 327              		.size	ADC_Init, .-ADC_Init
 328              		.section	.text.ADC_Enable,"ax",%progbits
 329              		.align	2
 330              		.global	ADC_Enable
 331              		.code	16
 332              		.thumb_func
 333              		.type	ADC_Enable, %function
 334              	ADC_Enable:
 335              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 12


 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 336              		.loc 1 296 0
 337              		.cfi_startproc
 338 0000 80B5     		push	{r7, lr}
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 344              		.loc 1 297 0
 345 0004 074B     		ldr	r3, .L19
 346 0006 1B68     		ldr	r3, [r3]
 347 0008 002B     		cmp	r3, #0
 348 000a 09DB     		blt	.L17
 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 349              		.loc 1 307 0
 350 000c 054B     		ldr	r3, .L19
 351 000e 054A     		ldr	r2, .L19
 352 0010 1268     		ldr	r2, [r2]
 353 0012 8021     		mov	r1, #128
 354 0014 0906     		lsl	r1, r1, #24
 355 0016 0A43     		orr	r2, r1
 356 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 357              		.loc 1 310 0
 358 001a 0A20     		mov	r0, #10
 359 001c FFF7FEFF 		bl	CyDelayUs
 360              	.L17:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 361              		.loc 1 312 0
 362 0020 BD46     		mov	sp, r7
 363              		@ sp needed
 364 0022 80BD     		pop	{r7, pc}
 365              	.L20:
 366              		.align	2
 367              	.L19:
 368 0024 00001A40 		.word	1075445760
 369              		.cfi_endproc
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 13


 370              	.LFE2:
 371              		.size	ADC_Enable, .-ADC_Enable
 372              		.section	.text.ADC_Stop,"ax",%progbits
 373              		.align	2
 374              		.global	ADC_Stop
 375              		.code	16
 376              		.thumb_func
 377              		.type	ADC_Stop, %function
 378              	ADC_Stop:
 379              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 380              		.loc 1 331 0
 381              		.cfi_startproc
 382 0000 80B5     		push	{r7, lr}
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 0002 00AF     		add	r7, sp, #0
 387              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 388              		.loc 1 332 0
 389 0004 034B     		ldr	r3, .L22
 390 0006 034A     		ldr	r2, .L22
 391 0008 1268     		ldr	r2, [r2]
 392 000a 5200     		lsl	r2, r2, #1
 393 000c 5208     		lsr	r2, r2, #1
 394 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 395              		.loc 1 333 0
 396 0010 BD46     		mov	sp, r7
 397              		@ sp needed
 398 0012 80BD     		pop	{r7, pc}
 399              	.L23:
 400              		.align	2
 401              	.L22:
 402 0014 00001A40 		.word	1075445760
 403              		.cfi_endproc
 404              	.LFE3:
 405              		.size	ADC_Stop, .-ADC_Stop
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 14


 406              		.section	.text.ADC_StartConvert,"ax",%progbits
 407              		.align	2
 408              		.global	ADC_StartConvert
 409              		.code	16
 410              		.thumb_func
 411              		.type	ADC_StartConvert, %function
 412              	ADC_StartConvert:
 413              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 414              		.loc 1 357 0
 415              		.cfi_startproc
 416 0000 80B5     		push	{r7, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 7, -8
 419              		.cfi_offset 14, -4
 420 0002 00AF     		add	r7, sp, #0
 421              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 422              		.loc 1 359 0
 423 0004 044B     		ldr	r3, .L25
 424 0006 044A     		ldr	r2, .L25
 425 0008 1268     		ldr	r2, [r2]
 426 000a 8021     		mov	r1, #128
 427 000c 4902     		lsl	r1, r1, #9
 428 000e 0A43     		orr	r2, r1
 429 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 430              		.loc 1 364 0
 431 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 15


 432              		@ sp needed
 433 0014 80BD     		pop	{r7, pc}
 434              	.L26:
 435 0016 C046     		.align	2
 436              	.L25:
 437 0018 04001A40 		.word	1075445764
 438              		.cfi_endproc
 439              	.LFE4:
 440              		.size	ADC_StartConvert, .-ADC_StartConvert
 441              		.section	.text.ADC_StopConvert,"ax",%progbits
 442              		.align	2
 443              		.global	ADC_StopConvert
 444              		.code	16
 445              		.thumb_func
 446              		.type	ADC_StopConvert, %function
 447              	ADC_StopConvert:
 448              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 449              		.loc 1 382 0
 450              		.cfi_startproc
 451 0000 80B5     		push	{r7, lr}
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 457              		.loc 1 384 0
 458 0004 034B     		ldr	r3, .L28
 459 0006 034A     		ldr	r2, .L28
 460 0008 1168     		ldr	r1, [r2]
 461 000a 034A     		ldr	r2, .L28+4
 462 000c 0A40     		and	r2, r1
 463 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 464              		.loc 1 386 0
 465 0010 BD46     		mov	sp, r7
 466              		@ sp needed
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 16


 467 0012 80BD     		pop	{r7, pc}
 468              	.L29:
 469              		.align	2
 470              	.L28:
 471 0014 04001A40 		.word	1075445764
 472 0018 FFFFFEFF 		.word	-65537
 473              		.cfi_endproc
 474              	.LFE5:
 475              		.size	ADC_StopConvert, .-ADC_StopConvert
 476              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 477              		.align	2
 478              		.global	ADC_IsEndConversion
 479              		.code	16
 480              		.thumb_func
 481              		.type	ADC_IsEndConversion, %function
 482              	ADC_IsEndConversion:
 483              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 484              		.loc 1 416 0
 485              		.cfi_startproc
 486 0000 80B5     		push	{r7, lr}
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 84B0     		sub	sp, sp, #16
 491              		.cfi_def_cfa_offset 24
 492 0004 00AF     		add	r7, sp, #0
 493              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 17


 494 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 495              		.loc 1 417 0
 496 0008 0023     		mov	r3, #0
 497 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 498              		.loc 1 419 0
 499 000c 7A68     		ldr	r2, [r7, #4]
 500 000e 0323     		mov	r3, #3
 501 0010 1340     		and	r3, r2
 502 0012 11D0     		beq	.L31
 503              	.L33:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 504              		.loc 1 423 0 discriminator 1
 505 0014 0B4B     		ldr	r3, .L35
 506 0016 1A68     		ldr	r2, [r3]
 507 0018 0123     		mov	r3, #1
 508 001a 1340     		and	r3, r2
 509 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 510              		.loc 1 424 0 discriminator 1
 511 001e FB68     		ldr	r3, [r7, #12]
 512 0020 002B     		cmp	r3, #0
 513 0022 03D1     		bne	.L32
 514 0024 7A68     		ldr	r2, [r7, #4]
 515 0026 0223     		mov	r3, #2
 516 0028 1340     		and	r3, r2
 517 002a F3D1     		bne	.L33
 518              	.L32:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 519              		.loc 1 426 0
 520 002c FB68     		ldr	r3, [r7, #12]
 521 002e 002B     		cmp	r3, #0
 522 0030 02D0     		beq	.L31
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 523              		.loc 1 429 0
 524 0032 044B     		ldr	r3, .L35
 525 0034 0122     		mov	r2, #1
 526 0036 1A60     		str	r2, [r3]
 527              	.L31:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 18


 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 528              		.loc 1 450 0
 529 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 530              		.loc 1 451 0
 531 003a 181C     		mov	r0, r3
 532 003c BD46     		mov	sp, r7
 533 003e 04B0     		add	sp, sp, #16
 534              		@ sp needed
 535 0040 80BD     		pop	{r7, pc}
 536              	.L36:
 537 0042 C046     		.align	2
 538              	.L35:
 539 0044 10021A40 		.word	1075446288
 540              		.cfi_endproc
 541              	.LFE6:
 542              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 543              		.section	.text.ADC_GetResult16,"ax",%progbits
 544              		.align	2
 545              		.global	ADC_GetResult16
 546              		.code	16
 547              		.thumb_func
 548              		.type	ADC_GetResult16, %function
 549              	ADC_GetResult16:
 550              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 551              		.loc 1 470 0
 552              		.cfi_startproc
 553 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 19


 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 7, -8
 556              		.cfi_offset 14, -4
 557 0002 84B0     		sub	sp, sp, #16
 558              		.cfi_def_cfa_offset 24
 559 0004 00AF     		add	r7, sp, #0
 560              		.cfi_def_cfa_register 7
 561 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 562              		.loc 1 474 0
 563 0008 7B68     		ldr	r3, [r7, #4]
 564 000a 002B     		cmp	r3, #0
 565 000c 02D0     		beq	.L38
 566              		.loc 1 474 0 is_stmt 0 discriminator 1
 567 000e 0020     		mov	r0, #0
 568 0010 FFF7FEFF 		bl	CyHalt
 569              	.L38:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 570              		.loc 1 476 0 is_stmt 1
 571 0014 7B68     		ldr	r3, [r7, #4]
 572 0016 002B     		cmp	r3, #0
 573 0018 08D1     		bne	.L39
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 574              		.loc 1 478 0
 575 001a 7B68     		ldr	r3, [r7, #4]
 576 001c 9B00     		lsl	r3, r3, #2
 577 001e 084A     		ldr	r2, .L42
 578 0020 9B18     		add	r3, r3, r2
 579 0022 1B68     		ldr	r3, [r3]
 580 0024 1B04     		lsl	r3, r3, #16
 581 0026 1B0C     		lsr	r3, r3, #16
 582 0028 FB60     		str	r3, [r7, #12]
 583 002a 01E0     		b	.L40
 584              	.L39:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 585              		.loc 1 486 0
 586 002c 0023     		mov	r3, #0
 587 002e FB60     		str	r3, [r7, #12]
 588              	.L40:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 589              		.loc 1 490 0
 590 0030 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 20


 591 0032 9BB2     		uxth	r3, r3
 592 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 593              		.loc 1 491 0
 594 0036 181C     		mov	r0, r3
 595 0038 BD46     		mov	sp, r7
 596 003a 04B0     		add	sp, sp, #16
 597              		@ sp needed
 598 003c 80BD     		pop	{r7, pc}
 599              	.L43:
 600 003e C046     		.align	2
 601              	.L42:
 602 0040 80011A40 		.word	1075446144
 603              		.cfi_endproc
 604              	.LFE7:
 605              		.size	ADC_GetResult16, .-ADC_GetResult16
 606              		.section	.text.ADC_SetChanMask,"ax",%progbits
 607              		.align	2
 608              		.global	ADC_SetChanMask
 609              		.code	16
 610              		.thumb_func
 611              		.type	ADC_SetChanMask, %function
 612              	ADC_SetChanMask:
 613              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 614              		.loc 1 515 0
 615              		.cfi_startproc
 616 0000 80B5     		push	{r7, lr}
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 0002 82B0     		sub	sp, sp, #8
 621              		.cfi_def_cfa_offset 16
 622 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 21


 623              		.cfi_def_cfa_register 7
 624 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 625              		.loc 1 516 0
 626 0008 034B     		ldr	r3, .L45
 627 000a 7968     		ldr	r1, [r7, #4]
 628 000c 0122     		mov	r2, #1
 629 000e 0A40     		and	r2, r1
 630 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 631              		.loc 1 517 0
 632 0012 BD46     		mov	sp, r7
 633 0014 02B0     		add	sp, sp, #8
 634              		@ sp needed
 635 0016 80BD     		pop	{r7, pc}
 636              	.L46:
 637              		.align	2
 638              	.L45:
 639 0018 20001A40 		.word	1075445792
 640              		.cfi_endproc
 641              	.LFE8:
 642              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 643              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 644              		.align	2
 645              		.global	ADC_SetLowLimit
 646              		.code	16
 647              		.thumb_func
 648              		.type	ADC_SetLowLimit, %function
 649              	ADC_SetLowLimit:
 650              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 22


 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 651              		.loc 1 559 0
 652              		.cfi_startproc
 653 0000 80B5     		push	{r7, lr}
 654              		.cfi_def_cfa_offset 8
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 82B0     		sub	sp, sp, #8
 658              		.cfi_def_cfa_offset 16
 659 0004 00AF     		add	r7, sp, #0
 660              		.cfi_def_cfa_register 7
 661 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 662              		.loc 1 560 0
 663 0008 084B     		ldr	r3, .L48
 664 000a 084A     		ldr	r2, .L48
 665 000c 1268     		ldr	r2, [r2]
 666 000e 120C     		lsr	r2, r2, #16
 667 0010 1204     		lsl	r2, r2, #16
 668 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 669              		.loc 1 561 0
 670 0014 054B     		ldr	r3, .L48
 671 0016 054A     		ldr	r2, .L48
 672 0018 1168     		ldr	r1, [r2]
 673 001a 7A68     		ldr	r2, [r7, #4]
 674 001c 1204     		lsl	r2, r2, #16
 675 001e 120C     		lsr	r2, r2, #16
 676 0020 0A43     		orr	r2, r1
 677 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 678              		.loc 1 562 0
 679 0024 BD46     		mov	sp, r7
 680 0026 02B0     		add	sp, sp, #8
 681              		@ sp needed
 682 0028 80BD     		pop	{r7, pc}
 683              	.L49:
 684 002a C046     		.align	2
 685              	.L48:
 686 002c 18001A40 		.word	1075445784
 687              		.cfi_endproc
 688              	.LFE9:
 689              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 23


 690              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 691              		.align	2
 692              		.global	ADC_SetHighLimit
 693              		.code	16
 694              		.thumb_func
 695              		.type	ADC_SetHighLimit, %function
 696              	ADC_SetHighLimit:
 697              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 698              		.loc 1 580 0
 699              		.cfi_startproc
 700 0000 80B5     		push	{r7, lr}
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
 703              		.cfi_offset 14, -4
 704 0002 82B0     		sub	sp, sp, #8
 705              		.cfi_def_cfa_offset 16
 706 0004 00AF     		add	r7, sp, #0
 707              		.cfi_def_cfa_register 7
 708 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 709              		.loc 1 581 0
 710 0008 074B     		ldr	r3, .L51
 711 000a 074A     		ldr	r2, .L51
 712 000c 1268     		ldr	r2, [r2]
 713 000e 1204     		lsl	r2, r2, #16
 714 0010 120C     		lsr	r2, r2, #16
 715 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 716              		.loc 1 582 0
 717 0014 044B     		ldr	r3, .L51
 718 0016 044A     		ldr	r2, .L51
 719 0018 1168     		ldr	r1, [r2]
 720 001a 7A68     		ldr	r2, [r7, #4]
 721 001c 1204     		lsl	r2, r2, #16
 722 001e 0A43     		orr	r2, r1
 723 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 724              		.loc 1 583 0
 725 0022 BD46     		mov	sp, r7
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 24


 726 0024 02B0     		add	sp, sp, #8
 727              		@ sp needed
 728 0026 80BD     		pop	{r7, pc}
 729              	.L52:
 730              		.align	2
 731              	.L51:
 732 0028 18001A40 		.word	1075445784
 733              		.cfi_endproc
 734              	.LFE10:
 735              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 736              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 737              		.align	2
 738              		.global	ADC_SetLimitMask
 739              		.code	16
 740              		.thumb_func
 741              		.type	ADC_SetLimitMask, %function
 742              	ADC_SetLimitMask:
 743              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 744              		.loc 1 604 0
 745              		.cfi_startproc
 746 0000 80B5     		push	{r7, lr}
 747              		.cfi_def_cfa_offset 8
 748              		.cfi_offset 7, -8
 749              		.cfi_offset 14, -4
 750 0002 82B0     		sub	sp, sp, #8
 751              		.cfi_def_cfa_offset 16
 752 0004 00AF     		add	r7, sp, #0
 753              		.cfi_def_cfa_register 7
 754 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 755              		.loc 1 605 0
 756 0008 034B     		ldr	r3, .L54
 757 000a 7968     		ldr	r1, [r7, #4]
 758 000c 0122     		mov	r2, #1
 759 000e 0A40     		and	r2, r1
 760 0010 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 25


 606:.\Generated_Source\PSoC4/ADC.c **** }
 761              		.loc 1 606 0
 762 0012 BD46     		mov	sp, r7
 763 0014 02B0     		add	sp, sp, #8
 764              		@ sp needed
 765 0016 80BD     		pop	{r7, pc}
 766              	.L55:
 767              		.align	2
 768              	.L54:
 769 0018 38021A40 		.word	1075446328
 770              		.cfi_endproc
 771              	.LFE11:
 772              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 773              		.section	.text.ADC_SetSatMask,"ax",%progbits
 774              		.align	2
 775              		.global	ADC_SetSatMask
 776              		.code	16
 777              		.thumb_func
 778              		.type	ADC_SetSatMask, %function
 779              	ADC_SetSatMask:
 780              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 781              		.loc 1 627 0
 782              		.cfi_startproc
 783 0000 80B5     		push	{r7, lr}
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 82B0     		sub	sp, sp, #8
 788              		.cfi_def_cfa_offset 16
 789 0004 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
 791 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 792              		.loc 1 628 0
 793 0008 034B     		ldr	r3, .L57
 794 000a 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 26


 795 000c 0122     		mov	r2, #1
 796 000e 0A40     		and	r2, r1
 797 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 798              		.loc 1 629 0
 799 0012 BD46     		mov	sp, r7
 800 0014 02B0     		add	sp, sp, #8
 801              		@ sp needed
 802 0016 80BD     		pop	{r7, pc}
 803              	.L58:
 804              		.align	2
 805              	.L57:
 806 0018 28021A40 		.word	1075446312
 807              		.cfi_endproc
 808              	.LFE12:
 809              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 810              		.section	.text.ADC_SetOffset,"ax",%progbits
 811              		.align	2
 812              		.global	ADC_SetOffset
 813              		.code	16
 814              		.thumb_func
 815              		.type	ADC_SetOffset, %function
 816              	ADC_SetOffset:
 817              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 818              		.loc 1 655 0
 819              		.cfi_startproc
 820 0000 80B5     		push	{r7, lr}
 821              		.cfi_def_cfa_offset 8
 822              		.cfi_offset 7, -8
 823              		.cfi_offset 14, -4
 824 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 27


 825              		.cfi_def_cfa_offset 16
 826 0004 00AF     		add	r7, sp, #0
 827              		.cfi_def_cfa_register 7
 828 0006 7860     		str	r0, [r7, #4]
 829 0008 0A1C     		mov	r2, r1
 830 000a BB1C     		add	r3, r7, #2
 831 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 832              		.loc 1 657 0
 833 000e 7B68     		ldr	r3, [r7, #4]
 834 0010 002B     		cmp	r3, #0
 835 0012 02D0     		beq	.L60
 836              		.loc 1 657 0 is_stmt 0 discriminator 1
 837 0014 0020     		mov	r0, #0
 838 0016 FFF7FEFF 		bl	CyHalt
 839              	.L60:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 840              		.loc 1 659 0 is_stmt 1
 841 001a 044B     		ldr	r3, .L61
 842 001c 7A68     		ldr	r2, [r7, #4]
 843 001e 5200     		lsl	r2, r2, #1
 844 0020 B91C     		add	r1, r7, #2
 845 0022 0988     		ldrh	r1, [r1]
 846 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 847              		.loc 1 660 0
 848 0026 BD46     		mov	sp, r7
 849 0028 02B0     		add	sp, sp, #8
 850              		@ sp needed
 851 002a 80BD     		pop	{r7, pc}
 852              	.L62:
 853              		.align	2
 854              	.L61:
 855 002c 00000000 		.word	ADC_offset
 856              		.cfi_endproc
 857              	.LFE13:
 858              		.size	ADC_SetOffset, .-ADC_SetOffset
 859              		.section	.text.ADC_SetGain,"ax",%progbits
 860              		.align	2
 861              		.global	ADC_SetGain
 862              		.code	16
 863              		.thumb_func
 864              		.type	ADC_SetGain, %function
 865              	ADC_SetGain:
 866              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 28


 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 867              		.loc 1 689 0
 868              		.cfi_startproc
 869 0000 80B5     		push	{r7, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 82B0     		sub	sp, sp, #8
 874              		.cfi_def_cfa_offset 16
 875 0004 00AF     		add	r7, sp, #0
 876              		.cfi_def_cfa_register 7
 877 0006 7860     		str	r0, [r7, #4]
 878 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 879              		.loc 1 691 0
 880 000a 7B68     		ldr	r3, [r7, #4]
 881 000c 002B     		cmp	r3, #0
 882 000e 02D0     		beq	.L64
 883              		.loc 1 691 0 is_stmt 0 discriminator 1
 884 0010 0020     		mov	r0, #0
 885 0012 FFF7FEFF 		bl	CyHalt
 886              	.L64:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 887              		.loc 1 693 0 is_stmt 1
 888 0016 044B     		ldr	r3, .L65
 889 0018 7A68     		ldr	r2, [r7, #4]
 890 001a 9200     		lsl	r2, r2, #2
 891 001c 3968     		ldr	r1, [r7]
 892 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 893              		.loc 1 694 0
 894 0020 BD46     		mov	sp, r7
 895 0022 02B0     		add	sp, sp, #8
 896              		@ sp needed
 897 0024 80BD     		pop	{r7, pc}
 898              	.L66:
 899 0026 C046     		.align	2
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 29


 900              	.L65:
 901 0028 00000000 		.word	ADC_countsPer10Volt
 902              		.cfi_endproc
 903              	.LFE14:
 904              		.size	ADC_SetGain, .-ADC_SetGain
 905              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 906              		.align	2
 907              		.global	ADC_CountsTo_mVolts
 908              		.code	16
 909              		.thumb_func
 910              		.type	ADC_CountsTo_mVolts, %function
 911              	ADC_CountsTo_mVolts:
 912              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 913              		.loc 1 722 0
 914              		.cfi_startproc
 915 0000 80B5     		push	{r7, lr}
 916              		.cfi_def_cfa_offset 8
 917              		.cfi_offset 7, -8
 918              		.cfi_offset 14, -4
 919 0002 84B0     		sub	sp, sp, #16
 920              		.cfi_def_cfa_offset 24
 921 0004 00AF     		add	r7, sp, #0
 922              		.cfi_def_cfa_register 7
 923 0006 7860     		str	r0, [r7, #4]
 924 0008 0A1C     		mov	r2, r1
 925 000a BB1C     		add	r3, r7, #2
 926 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 30


 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 927              		.loc 1 726 0
 928 000e 7B68     		ldr	r3, [r7, #4]
 929 0010 002B     		cmp	r3, #0
 930 0012 02D0     		beq	.L68
 931              		.loc 1 726 0 is_stmt 0 discriminator 1
 932 0014 0020     		mov	r0, #0
 933 0016 FFF7FEFF 		bl	CyHalt
 934              	.L68:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 935              		.loc 1 737 0 is_stmt 1
 936 001a BB1C     		add	r3, r7, #2
 937 001c 1A88     		ldrh	r2, [r3]
 938 001e 1E4B     		ldr	r3, .L74
 939 0020 7968     		ldr	r1, [r7, #4]
 940 0022 4900     		lsl	r1, r1, #1
 941 0024 CB5A     		ldrh	r3, [r1, r3]
 942 0026 9BB2     		uxth	r3, r3
 943 0028 9BB2     		uxth	r3, r3
 944 002a D31A     		sub	r3, r2, r3
 945 002c 9AB2     		uxth	r2, r3
 946 002e BB1C     		add	r3, r7, #2
 947 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 948              		.loc 1 739 0
 949 0032 BB1C     		add	r3, r7, #2
 950 0034 0021     		mov	r1, #0
 951 0036 5B5E     		ldrsh	r3, [r3, r1]
 952 0038 184A     		ldr	r2, .L74+4
 953 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 954              		.loc 1 740 0
 955 003c BB1C     		add	r3, r7, #2
 956 003e 0021     		mov	r1, #0
 957 0040 5B5E     		ldrsh	r3, [r3, r1]
 958 0042 002B     		cmp	r3, #0
 959 0044 08DD     		ble	.L69
 960              		.loc 1 740 0 is_stmt 0 discriminator 1
 961 0046 164B     		ldr	r3, .L74+8
 962 0048 7968     		ldr	r1, [r7, #4]
 963 004a 8900     		lsl	r1, r1, #2
 964 004c CB58     		ldr	r3, [r1, r3]
 965 004e 002B     		cmp	r3, #0
 966 0050 00DA     		bge	.L70
 967 0052 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 31


 968              	.L70:
 969 0054 5B10     		asr	r3, r3, #1
 970 0056 08E0     		b	.L71
 971              	.L69:
 972              		.loc 1 740 0 discriminator 2
 973 0058 114B     		ldr	r3, .L74+8
 974 005a 7968     		ldr	r1, [r7, #4]
 975 005c 8900     		lsl	r1, r1, #2
 976 005e CB58     		ldr	r3, [r1, r3]
 977 0060 002B     		cmp	r3, #0
 978 0062 00DA     		bge	.L72
 979 0064 0133     		add	r3, r3, #1
 980              	.L72:
 981 0066 5B10     		asr	r3, r3, #1
 982 0068 5B42     		neg	r3, r3
 983              	.L71:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 984              		.loc 1 739 0 is_stmt 1
 985 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 986              		.loc 1 741 0
 987 006c 0C4B     		ldr	r3, .L74+8
 988 006e 7968     		ldr	r1, [r7, #4]
 989 0070 8900     		lsl	r1, r1, #2
 990 0072 CB58     		ldr	r3, [r1, r3]
 991 0074 101C     		mov	r0, r2
 992 0076 191C     		mov	r1, r3
 993 0078 FFF7FEFF 		bl	__aeabi_idiv
 994 007c 031C     		mov	r3, r0
 995 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 996              		.loc 1 739 0
 997 0080 3B1C     		mov	r3, r7
 998 0082 0E33     		add	r3, r3, #14
 999 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1000              		.loc 1 743 0
 1001 0086 3B1C     		mov	r3, r7
 1002 0088 0E33     		add	r3, r3, #14
 1003 008a 1B88     		ldrh	r3, [r3]
 1004 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1005              		.loc 1 744 0
 1006 008e 181C     		mov	r0, r3
 1007 0090 BD46     		mov	sp, r7
 1008 0092 04B0     		add	sp, sp, #16
 1009              		@ sp needed
 1010 0094 80BD     		pop	{r7, pc}
 1011              	.L75:
 1012 0096 C046     		.align	2
 1013              	.L74:
 1014 0098 00000000 		.word	ADC_offset
 1015 009c 10270000 		.word	10000
 1016 00a0 00000000 		.word	ADC_countsPer10Volt
 1017              		.cfi_endproc
 1018              	.LFE15:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 32


 1019              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1020              		.global	__aeabi_lmul
 1021              		.global	__aeabi_ldivmod
 1022              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1023              		.align	2
 1024              		.global	ADC_CountsTo_uVolts
 1025              		.code	16
 1026              		.thumb_func
 1027              		.type	ADC_CountsTo_uVolts, %function
 1028              	ADC_CountsTo_uVolts:
 1029              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1030              		.loc 1 776 0
 1031              		.cfi_startproc
 1032 0000 B0B5     		push	{r4, r5, r7, lr}
 1033              		.cfi_def_cfa_offset 16
 1034              		.cfi_offset 4, -16
 1035              		.cfi_offset 5, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 86B0     		sub	sp, sp, #24
 1039              		.cfi_def_cfa_offset 40
 1040 0004 00AF     		add	r7, sp, #0
 1041              		.cfi_def_cfa_register 7
 1042 0006 F860     		str	r0, [r7, #12]
 1043 0008 0A1C     		mov	r2, r1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 33


 1044 000a 3B1C     		mov	r3, r7
 1045 000c 0A33     		add	r3, r3, #10
 1046 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1047              		.loc 1 780 0
 1048 0010 FB68     		ldr	r3, [r7, #12]
 1049 0012 002B     		cmp	r3, #0
 1050 0014 02D0     		beq	.L77
 1051              		.loc 1 780 0 is_stmt 0 discriminator 1
 1052 0016 0020     		mov	r0, #0
 1053 0018 FFF7FEFF 		bl	CyHalt
 1054              	.L77:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1055              		.loc 1 791 0 is_stmt 1
 1056 001c 3B1C     		mov	r3, r7
 1057 001e 0A33     		add	r3, r3, #10
 1058 0020 1A88     		ldrh	r2, [r3]
 1059 0022 1B4B     		ldr	r3, .L79+8
 1060 0024 F968     		ldr	r1, [r7, #12]
 1061 0026 4900     		lsl	r1, r1, #1
 1062 0028 CB5A     		ldrh	r3, [r1, r3]
 1063 002a 9BB2     		uxth	r3, r3
 1064 002c 9BB2     		uxth	r3, r3
 1065 002e D31A     		sub	r3, r2, r3
 1066 0030 9AB2     		uxth	r2, r3
 1067 0032 3B1C     		mov	r3, r7
 1068 0034 0A33     		add	r3, r3, #10
 1069 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1070              		.loc 1 793 0
 1071 0038 3B1C     		mov	r3, r7
 1072 003a 0A33     		add	r3, r3, #10
 1073 003c 1B88     		ldrh	r3, [r3]
 1074 003e 1BB2     		sxth	r3, r3
 1075 0040 3B60     		str	r3, [r7]
 1076 0042 DB17     		asr	r3, r3, #31
 1077 0044 7B60     		str	r3, [r7, #4]
 1078 0046 3868     		ldr	r0, [r7]
 1079 0048 7968     		ldr	r1, [r7, #4]
 1080 004a 104B     		ldr	r3, .L79+4
 1081 004c 0E4A     		ldr	r2, .L79
 1082 004e FFF7FEFF 		bl	__aeabi_lmul
 1083 0052 021C     		mov	r2, r0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 34


 1084 0054 0B1C     		mov	r3, r1
 1085 0056 0F49     		ldr	r1, .L79+12
 1086 0058 F868     		ldr	r0, [r7, #12]
 1087 005a 8000     		lsl	r0, r0, #2
 1088 005c 4158     		ldr	r1, [r0, r1]
 1089 005e 0C1C     		mov	r4, r1
 1090 0060 C917     		asr	r1, r1, #31
 1091 0062 0D1C     		mov	r5, r1
 1092 0064 101C     		mov	r0, r2
 1093 0066 191C     		mov	r1, r3
 1094 0068 221C     		mov	r2, r4
 1095 006a 2B1C     		mov	r3, r5
 1096 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1097 0070 031C     		mov	r3, r0
 1098 0072 0C1C     		mov	r4, r1
 1099 0074 3B61     		str	r3, [r7, #16]
 1100 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1101              		.loc 1 795 0
 1102 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1103              		.loc 1 796 0
 1104 007a 181C     		mov	r0, r3
 1105 007c BD46     		mov	sp, r7
 1106 007e 06B0     		add	sp, sp, #24
 1107              		@ sp needed
 1108 0080 B0BD     		pop	{r4, r5, r7, pc}
 1109              	.L80:
 1110 0082 C046C046 		.align	3
 1110      C046
 1111              	.L79:
 1112 0088 80969800 		.word	10000000
 1113 008c 00000000 		.word	0
 1114 0090 00000000 		.word	ADC_offset
 1115 0094 00000000 		.word	ADC_countsPer10Volt
 1116              		.cfi_endproc
 1117              	.LFE16:
 1118              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1119              		.global	__aeabi_i2f
 1120              		.global	__aeabi_fmul
 1121              		.global	__aeabi_fdiv
 1122              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1123              		.align	2
 1124              		.global	ADC_CountsTo_Volts
 1125              		.code	16
 1126              		.thumb_func
 1127              		.type	ADC_CountsTo_Volts, %function
 1128              	ADC_CountsTo_Volts:
 1129              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 35


 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1130              		.loc 1 821 0
 1131              		.cfi_startproc
 1132 0000 90B5     		push	{r4, r7, lr}
 1133              		.cfi_def_cfa_offset 12
 1134              		.cfi_offset 4, -12
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 85B0     		sub	sp, sp, #20
 1138              		.cfi_def_cfa_offset 32
 1139 0004 00AF     		add	r7, sp, #0
 1140              		.cfi_def_cfa_register 7
 1141 0006 7860     		str	r0, [r7, #4]
 1142 0008 0A1C     		mov	r2, r1
 1143 000a BB1C     		add	r3, r7, #2
 1144 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1145              		.loc 1 825 0
 1146 000e 7B68     		ldr	r3, [r7, #4]
 1147 0010 002B     		cmp	r3, #0
 1148 0012 02D0     		beq	.L82
 1149              		.loc 1 825 0 is_stmt 0 discriminator 1
 1150 0014 0020     		mov	r0, #0
 1151 0016 FFF7FEFF 		bl	CyHalt
 1152              	.L82:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1153              		.loc 1 836 0 is_stmt 1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 36


 1154 001a BB1C     		add	r3, r7, #2
 1155 001c 1A88     		ldrh	r2, [r3]
 1156 001e 154B     		ldr	r3, .L84
 1157 0020 7968     		ldr	r1, [r7, #4]
 1158 0022 4900     		lsl	r1, r1, #1
 1159 0024 CB5A     		ldrh	r3, [r1, r3]
 1160 0026 9BB2     		uxth	r3, r3
 1161 0028 9BB2     		uxth	r3, r3
 1162 002a D31A     		sub	r3, r2, r3
 1163 002c 9AB2     		uxth	r2, r3
 1164 002e BB1C     		add	r3, r7, #2
 1165 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1166              		.loc 1 838 0
 1167 0032 BB1C     		add	r3, r7, #2
 1168 0034 0022     		mov	r2, #0
 1169 0036 9B5E     		ldrsh	r3, [r3, r2]
 1170 0038 181C     		mov	r0, r3
 1171 003a FFF7FEFF 		bl	__aeabi_i2f
 1172 003e 031C     		add	r3, r0, #0
 1173 0040 181C     		add	r0, r3, #0
 1174 0042 0D49     		ldr	r1, .L84+4
 1175 0044 FFF7FEFF 		bl	__aeabi_fmul
 1176 0048 031C     		add	r3, r0, #0
 1177 004a 1C1C     		add	r4, r3, #0
 1178 004c 0B4B     		ldr	r3, .L84+8
 1179 004e 7A68     		ldr	r2, [r7, #4]
 1180 0050 9200     		lsl	r2, r2, #2
 1181 0052 D358     		ldr	r3, [r2, r3]
 1182 0054 181C     		mov	r0, r3
 1183 0056 FFF7FEFF 		bl	__aeabi_i2f
 1184 005a 031C     		add	r3, r0, #0
 1185 005c 201C     		add	r0, r4, #0
 1186 005e 191C     		add	r1, r3, #0
 1187 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1188 0064 031C     		add	r3, r0, #0
 1189 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1190              		.loc 1 840 0
 1191 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1192              		.loc 1 841 0
 1193 006a 181C     		add	r0, r3, #0
 1194 006c BD46     		mov	sp, r7
 1195 006e 05B0     		add	sp, sp, #20
 1196              		@ sp needed
 1197 0070 90BD     		pop	{r4, r7, pc}
 1198              	.L85:
 1199 0072 C046     		.align	2
 1200              	.L84:
 1201 0074 00000000 		.word	ADC_offset
 1202 0078 00002041 		.word	1092616192
 1203 007c 00000000 		.word	ADC_countsPer10Volt
 1204              		.cfi_endproc
 1205              	.LFE17:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 37


 1206              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1207              		.text
 1208              	.Letext0:
 1209              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1210              		.section	.debug_info,"",%progbits
 1211              	.Ldebug_info0:
 1212 0000 70040000 		.4byte	0x470
 1213 0004 0400     		.2byte	0x4
 1214 0006 00000000 		.4byte	.Ldebug_abbrev0
 1215 000a 04       		.byte	0x4
 1216 000b 01       		.uleb128 0x1
 1217 000c F1020000 		.4byte	.LASF59
 1218 0010 01       		.byte	0x1
 1219 0011 27000000 		.4byte	.LASF60
 1220 0015 E3000000 		.4byte	.LASF61
 1221 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1222 001d 00000000 		.4byte	0
 1223 0021 00000000 		.4byte	.Ldebug_line0
 1224 0025 02       		.uleb128 0x2
 1225 0026 01       		.byte	0x1
 1226 0027 06       		.byte	0x6
 1227 0028 D9020000 		.4byte	.LASF0
 1228 002c 02       		.uleb128 0x2
 1229 002d 01       		.byte	0x1
 1230 002e 08       		.byte	0x8
 1231 002f 2A010000 		.4byte	.LASF1
 1232 0033 02       		.uleb128 0x2
 1233 0034 02       		.byte	0x2
 1234 0035 05       		.byte	0x5
 1235 0036 8B000000 		.4byte	.LASF2
 1236 003a 02       		.uleb128 0x2
 1237 003b 02       		.byte	0x2
 1238 003c 07       		.byte	0x7
 1239 003d 78000000 		.4byte	.LASF3
 1240 0041 02       		.uleb128 0x2
 1241 0042 04       		.byte	0x4
 1242 0043 05       		.byte	0x5
 1243 0044 CB020000 		.4byte	.LASF4
 1244 0048 02       		.uleb128 0x2
 1245 0049 04       		.byte	0x4
 1246 004a 07       		.byte	0x7
 1247 004b 4F010000 		.4byte	.LASF5
 1248 004f 02       		.uleb128 0x2
 1249 0050 08       		.byte	0x8
 1250 0051 05       		.byte	0x5
 1251 0052 00000000 		.4byte	.LASF6
 1252 0056 02       		.uleb128 0x2
 1253 0057 08       		.byte	0x8
 1254 0058 07       		.byte	0x7
 1255 0059 0A020000 		.4byte	.LASF7
 1256 005d 03       		.uleb128 0x3
 1257 005e 04       		.byte	0x4
 1258 005f 05       		.byte	0x5
 1259 0060 696E7400 		.ascii	"int\000"
 1260 0064 02       		.uleb128 0x2
 1261 0065 04       		.byte	0x4
 1262 0066 07       		.byte	0x7
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 38


 1263 0067 EB010000 		.4byte	.LASF8
 1264 006b 04       		.uleb128 0x4
 1265 006c B1020000 		.4byte	.LASF9
 1266 0070 02       		.byte	0x2
 1267 0071 A1       		.byte	0xa1
 1268 0072 2C000000 		.4byte	0x2c
 1269 0076 04       		.uleb128 0x4
 1270 0077 C2010000 		.4byte	.LASF10
 1271 007b 02       		.byte	0x2
 1272 007c A2       		.byte	0xa2
 1273 007d 3A000000 		.4byte	0x3a
 1274 0081 04       		.uleb128 0x4
 1275 0082 D3010000 		.4byte	.LASF11
 1276 0086 02       		.byte	0x2
 1277 0087 A3       		.byte	0xa3
 1278 0088 48000000 		.4byte	0x48
 1279 008c 04       		.uleb128 0x4
 1280 008d 49010000 		.4byte	.LASF12
 1281 0091 02       		.byte	0x2
 1282 0092 A5       		.byte	0xa5
 1283 0093 33000000 		.4byte	0x33
 1284 0097 04       		.uleb128 0x4
 1285 0098 61010000 		.4byte	.LASF13
 1286 009c 02       		.byte	0x2
 1287 009d A6       		.byte	0xa6
 1288 009e 41000000 		.4byte	0x41
 1289 00a2 04       		.uleb128 0x4
 1290 00a3 BA000000 		.4byte	.LASF14
 1291 00a7 02       		.byte	0x2
 1292 00a8 A7       		.byte	0xa7
 1293 00a9 AD000000 		.4byte	0xad
 1294 00ad 02       		.uleb128 0x2
 1295 00ae 04       		.byte	0x4
 1296 00af 04       		.byte	0x4
 1297 00b0 4D000000 		.4byte	.LASF15
 1298 00b4 02       		.uleb128 0x2
 1299 00b5 08       		.byte	0x8
 1300 00b6 04       		.byte	0x4
 1301 00b7 AA010000 		.4byte	.LASF16
 1302 00bb 04       		.uleb128 0x4
 1303 00bc 6D030000 		.4byte	.LASF17
 1304 00c0 02       		.byte	0x2
 1305 00c1 AC       		.byte	0xac
 1306 00c2 4F000000 		.4byte	0x4f
 1307 00c6 02       		.uleb128 0x2
 1308 00c7 01       		.byte	0x1
 1309 00c8 08       		.byte	0x8
 1310 00c9 D4020000 		.4byte	.LASF18
 1311 00cd 05       		.uleb128 0x5
 1312 00ce 21000000 		.4byte	.LASF19
 1313 00d2 02       		.byte	0x2
 1314 00d3 4D01     		.2byte	0x14d
 1315 00d5 D9000000 		.4byte	0xd9
 1316 00d9 06       		.uleb128 0x6
 1317 00da 81000000 		.4byte	0x81
 1318 00de 02       		.uleb128 0x2
 1319 00df 04       		.byte	0x4
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 39


 1320 00e0 07       		.byte	0x7
 1321 00e1 4D020000 		.4byte	.LASF20
 1322 00e5 07       		.uleb128 0x7
 1323 00e6 28020000 		.4byte	.LASF24
 1324 00ea 01       		.byte	0x1
 1325 00eb 3F       		.byte	0x3f
 1326 00ec 00000000 		.4byte	.LFB0
 1327 00f0 24000000 		.4byte	.LFE0-.LFB0
 1328 00f4 01       		.uleb128 0x1
 1329 00f5 9C       		.byte	0x9c
 1330 00f6 08       		.uleb128 0x8
 1331 00f7 32020000 		.4byte	.LASF35
 1332 00fb 01       		.byte	0x1
 1333 00fc 5E       		.byte	0x5e
 1334 00fd 00000000 		.4byte	.LFB1
 1335 0101 A8010000 		.4byte	.LFE1-.LFB1
 1336 0105 01       		.uleb128 0x1
 1337 0106 9C       		.byte	0x9c
 1338 0107 36010000 		.4byte	0x136
 1339 010b 09       		.uleb128 0x9
 1340 010c 93020000 		.4byte	.LASF21
 1341 0110 01       		.byte	0x1
 1342 0111 60       		.byte	0x60
 1343 0112 81000000 		.4byte	0x81
 1344 0116 02       		.uleb128 0x2
 1345 0117 91       		.byte	0x91
 1346 0118 6C       		.sleb128 -20
 1347 0119 09       		.uleb128 0x9
 1348 011a CD000000 		.4byte	.LASF22
 1349 011e 01       		.byte	0x1
 1350 011f 61       		.byte	0x61
 1351 0120 81000000 		.4byte	0x81
 1352 0124 02       		.uleb128 0x2
 1353 0125 91       		.byte	0x91
 1354 0126 64       		.sleb128 -28
 1355 0127 09       		.uleb128 0x9
 1356 0128 03020000 		.4byte	.LASF23
 1357 012c 01       		.byte	0x1
 1358 012d 62       		.byte	0x62
 1359 012e 97000000 		.4byte	0x97
 1360 0132 02       		.uleb128 0x2
 1361 0133 91       		.byte	0x91
 1362 0134 68       		.sleb128 -24
 1363 0135 00       		.byte	0
 1364 0136 0A       		.uleb128 0xa
 1365 0137 F8010000 		.4byte	.LASF25
 1366 013b 01       		.byte	0x1
 1367 013c 2701     		.2byte	0x127
 1368 013e 00000000 		.4byte	.LFB2
 1369 0142 28000000 		.4byte	.LFE2-.LFB2
 1370 0146 01       		.uleb128 0x1
 1371 0147 9C       		.byte	0x9c
 1372 0148 0B       		.uleb128 0xb
 1373 0149 73030000 		.4byte	.LASF26
 1374 014d 01       		.byte	0x1
 1375 014e 4A01     		.2byte	0x14a
 1376 0150 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 40


 1377 0154 18000000 		.4byte	.LFE3-.LFB3
 1378 0158 01       		.uleb128 0x1
 1379 0159 9C       		.byte	0x9c
 1380 015a 0B       		.uleb128 0xb
 1381 015b 7D020000 		.4byte	.LASF27
 1382 015f 01       		.byte	0x1
 1383 0160 6401     		.2byte	0x164
 1384 0162 00000000 		.4byte	.LFB4
 1385 0166 1C000000 		.4byte	.LFE4-.LFB4
 1386 016a 01       		.uleb128 0x1
 1387 016b 9C       		.byte	0x9c
 1388 016c 0B       		.uleb128 0xb
 1389 016d A1020000 		.4byte	.LASF28
 1390 0171 01       		.byte	0x1
 1391 0172 7D01     		.2byte	0x17d
 1392 0174 00000000 		.4byte	.LFB5
 1393 0178 1C000000 		.4byte	.LFE5-.LFB5
 1394 017c 01       		.uleb128 0x1
 1395 017d 9C       		.byte	0x9c
 1396 017e 0C       		.uleb128 0xc
 1397 017f 96010000 		.4byte	.LASF30
 1398 0183 01       		.byte	0x1
 1399 0184 9F01     		.2byte	0x19f
 1400 0186 81000000 		.4byte	0x81
 1401 018a 00000000 		.4byte	.LFB6
 1402 018e 48000000 		.4byte	.LFE6-.LFB6
 1403 0192 01       		.uleb128 0x1
 1404 0193 9C       		.byte	0x9c
 1405 0194 B7010000 		.4byte	0x1b7
 1406 0198 0D       		.uleb128 0xd
 1407 0199 99020000 		.4byte	.LASF32
 1408 019d 01       		.byte	0x1
 1409 019e 9F01     		.2byte	0x19f
 1410 01a0 81000000 		.4byte	0x81
 1411 01a4 02       		.uleb128 0x2
 1412 01a5 91       		.byte	0x91
 1413 01a6 6C       		.sleb128 -20
 1414 01a7 0E       		.uleb128 0xe
 1415 01a8 B3000000 		.4byte	.LASF29
 1416 01ac 01       		.byte	0x1
 1417 01ad A101     		.2byte	0x1a1
 1418 01af 81000000 		.4byte	0x81
 1419 01b3 02       		.uleb128 0x2
 1420 01b4 91       		.byte	0x91
 1421 01b5 74       		.sleb128 -12
 1422 01b6 00       		.byte	0
 1423 01b7 0F       		.uleb128 0xf
 1424 01b8 67010000 		.4byte	.LASF31
 1425 01bc 01       		.byte	0x1
 1426 01bd D501     		.2byte	0x1d5
 1427 01bf 8C000000 		.4byte	0x8c
 1428 01c3 00000000 		.4byte	.LFB7
 1429 01c7 44000000 		.4byte	.LFE7-.LFB7
 1430 01cb 01       		.uleb128 0x1
 1431 01cc 9C       		.byte	0x9c
 1432 01cd F0010000 		.4byte	0x1f0
 1433 01d1 0D       		.uleb128 0xd
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 41


 1434 01d2 41020000 		.4byte	.LASF33
 1435 01d6 01       		.byte	0x1
 1436 01d7 D501     		.2byte	0x1d5
 1437 01d9 81000000 		.4byte	0x81
 1438 01dd 02       		.uleb128 0x2
 1439 01de 91       		.byte	0x91
 1440 01df 6C       		.sleb128 -20
 1441 01e0 0E       		.uleb128 0xe
 1442 01e1 21020000 		.4byte	.LASF34
 1443 01e5 01       		.byte	0x1
 1444 01e6 D701     		.2byte	0x1d7
 1445 01e8 81000000 		.4byte	0x81
 1446 01ec 02       		.uleb128 0x2
 1447 01ed 91       		.byte	0x91
 1448 01ee 74       		.sleb128 -12
 1449 01ef 00       		.byte	0
 1450 01f0 10       		.uleb128 0x10
 1451 01f1 77010000 		.4byte	.LASF36
 1452 01f5 01       		.byte	0x1
 1453 01f6 0202     		.2byte	0x202
 1454 01f8 00000000 		.4byte	.LFB8
 1455 01fc 1C000000 		.4byte	.LFE8-.LFB8
 1456 0200 01       		.uleb128 0x1
 1457 0201 9C       		.byte	0x9c
 1458 0202 16020000 		.4byte	0x216
 1459 0206 0D       		.uleb128 0xd
 1460 0207 8E020000 		.4byte	.LASF37
 1461 020b 01       		.byte	0x1
 1462 020c 0202     		.2byte	0x202
 1463 020e 81000000 		.4byte	0x81
 1464 0212 02       		.uleb128 0x2
 1465 0213 91       		.byte	0x91
 1466 0214 74       		.sleb128 -12
 1467 0215 00       		.byte	0
 1468 0216 10       		.uleb128 0x10
 1469 0217 A3000000 		.4byte	.LASF38
 1470 021b 01       		.byte	0x1
 1471 021c 2E02     		.2byte	0x22e
 1472 021e 00000000 		.4byte	.LFB9
 1473 0222 30000000 		.4byte	.LFE9-.LFB9
 1474 0226 01       		.uleb128 0x1
 1475 0227 9C       		.byte	0x9c
 1476 0228 3C020000 		.4byte	0x23c
 1477 022c 0D       		.uleb128 0xd
 1478 022d B1010000 		.4byte	.LASF39
 1479 0231 01       		.byte	0x1
 1480 0232 2E02     		.2byte	0x22e
 1481 0234 81000000 		.4byte	0x81
 1482 0238 02       		.uleb128 0x2
 1483 0239 91       		.byte	0x91
 1484 023a 74       		.sleb128 -12
 1485 023b 00       		.byte	0
 1486 023c 10       		.uleb128 0x10
 1487 023d 38010000 		.4byte	.LASF40
 1488 0241 01       		.byte	0x1
 1489 0242 4302     		.2byte	0x243
 1490 0244 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 42


 1491 0248 2C000000 		.4byte	.LFE10-.LFB10
 1492 024c 01       		.uleb128 0x1
 1493 024d 9C       		.byte	0x9c
 1494 024e 62020000 		.4byte	0x262
 1495 0252 0D       		.uleb128 0xd
 1496 0253 53000000 		.4byte	.LASF41
 1497 0257 01       		.byte	0x1
 1498 0258 4302     		.2byte	0x243
 1499 025a 81000000 		.4byte	0x81
 1500 025e 02       		.uleb128 0x2
 1501 025f 91       		.byte	0x91
 1502 0260 74       		.sleb128 -12
 1503 0261 00       		.byte	0
 1504 0262 10       		.uleb128 0x10
 1505 0263 DA010000 		.4byte	.LASF42
 1506 0267 01       		.byte	0x1
 1507 0268 5B02     		.2byte	0x25b
 1508 026a 00000000 		.4byte	.LFB11
 1509 026e 1C000000 		.4byte	.LFE11-.LFB11
 1510 0272 01       		.uleb128 0x1
 1511 0273 9C       		.byte	0x9c
 1512 0274 88020000 		.4byte	0x288
 1513 0278 0D       		.uleb128 0xd
 1514 0279 8E020000 		.4byte	.LASF37
 1515 027d 01       		.byte	0x1
 1516 027e 5B02     		.2byte	0x25b
 1517 0280 81000000 		.4byte	0x81
 1518 0284 02       		.uleb128 0x2
 1519 0285 91       		.byte	0x91
 1520 0286 74       		.sleb128 -12
 1521 0287 00       		.byte	0
 1522 0288 10       		.uleb128 0x10
 1523 0289 87010000 		.4byte	.LASF43
 1524 028d 01       		.byte	0x1
 1525 028e 7202     		.2byte	0x272
 1526 0290 00000000 		.4byte	.LFB12
 1527 0294 1C000000 		.4byte	.LFE12-.LFB12
 1528 0298 01       		.uleb128 0x1
 1529 0299 9C       		.byte	0x9c
 1530 029a AE020000 		.4byte	0x2ae
 1531 029e 0D       		.uleb128 0xd
 1532 029f 8E020000 		.4byte	.LASF37
 1533 02a3 01       		.byte	0x1
 1534 02a4 7202     		.2byte	0x272
 1535 02a6 81000000 		.4byte	0x81
 1536 02aa 02       		.uleb128 0x2
 1537 02ab 91       		.byte	0x91
 1538 02ac 74       		.sleb128 -12
 1539 02ad 00       		.byte	0
 1540 02ae 11       		.uleb128 0x11
 1541 02af 95000000 		.4byte	.LASF44
 1542 02b3 01       		.byte	0x1
 1543 02b4 8E02     		.2byte	0x28e
 1544 02b6 00000000 		.4byte	.LFB13
 1545 02ba 30000000 		.4byte	.LFE13-.LFB13
 1546 02be 01       		.uleb128 0x1
 1547 02bf 9C       		.byte	0x9c
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 43


 1548 02c0 E3020000 		.4byte	0x2e3
 1549 02c4 0D       		.uleb128 0xd
 1550 02c5 41020000 		.4byte	.LASF33
 1551 02c9 01       		.byte	0x1
 1552 02ca 8E02     		.2byte	0x28e
 1553 02cc 81000000 		.4byte	0x81
 1554 02d0 02       		.uleb128 0x2
 1555 02d1 91       		.byte	0x91
 1556 02d2 74       		.sleb128 -12
 1557 02d3 0D       		.uleb128 0xd
 1558 02d4 46000000 		.4byte	.LASF45
 1559 02d8 01       		.byte	0x1
 1560 02d9 8E02     		.2byte	0x28e
 1561 02db 8C000000 		.4byte	0x8c
 1562 02df 02       		.uleb128 0x2
 1563 02e0 91       		.byte	0x91
 1564 02e1 72       		.sleb128 -14
 1565 02e2 00       		.byte	0
 1566 02e3 11       		.uleb128 0x11
 1567 02e4 D7000000 		.4byte	.LASF46
 1568 02e8 01       		.byte	0x1
 1569 02e9 B002     		.2byte	0x2b0
 1570 02eb 00000000 		.4byte	.LFB14
 1571 02ef 2C000000 		.4byte	.LFE14-.LFB14
 1572 02f3 01       		.uleb128 0x1
 1573 02f4 9C       		.byte	0x9c
 1574 02f5 18030000 		.4byte	0x318
 1575 02f9 0D       		.uleb128 0xd
 1576 02fa 41020000 		.4byte	.LASF33
 1577 02fe 01       		.byte	0x1
 1578 02ff B002     		.2byte	0x2b0
 1579 0301 81000000 		.4byte	0x81
 1580 0305 02       		.uleb128 0x2
 1581 0306 91       		.byte	0x91
 1582 0307 74       		.sleb128 -12
 1583 0308 0D       		.uleb128 0xd
 1584 0309 BA010000 		.4byte	.LASF47
 1585 030d 01       		.byte	0x1
 1586 030e B002     		.2byte	0x2b0
 1587 0310 97000000 		.4byte	0x97
 1588 0314 02       		.uleb128 0x2
 1589 0315 91       		.byte	0x91
 1590 0316 70       		.sleb128 -16
 1591 0317 00       		.byte	0
 1592 0318 0F       		.uleb128 0xf
 1593 0319 5D000000 		.4byte	.LASF48
 1594 031d 01       		.byte	0x1
 1595 031e D102     		.2byte	0x2d1
 1596 0320 8C000000 		.4byte	0x8c
 1597 0324 00000000 		.4byte	.LFB15
 1598 0328 A4000000 		.4byte	.LFE15-.LFB15
 1599 032c 01       		.uleb128 0x1
 1600 032d 9C       		.byte	0x9c
 1601 032e 60030000 		.4byte	0x360
 1602 0332 0D       		.uleb128 0xd
 1603 0333 41020000 		.4byte	.LASF33
 1604 0337 01       		.byte	0x1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 44


 1605 0338 D102     		.2byte	0x2d1
 1606 033a 81000000 		.4byte	0x81
 1607 033e 02       		.uleb128 0x2
 1608 033f 91       		.byte	0x91
 1609 0340 6C       		.sleb128 -20
 1610 0341 0D       		.uleb128 0xd
 1611 0342 C9010000 		.4byte	.LASF49
 1612 0346 01       		.byte	0x1
 1613 0347 D102     		.2byte	0x2d1
 1614 0349 8C000000 		.4byte	0x8c
 1615 034d 02       		.uleb128 0x2
 1616 034e 91       		.byte	0x91
 1617 034f 6A       		.sleb128 -22
 1618 0350 0E       		.uleb128 0xe
 1619 0351 46020000 		.4byte	.LASF50
 1620 0355 01       		.byte	0x1
 1621 0356 D302     		.2byte	0x2d3
 1622 0358 8C000000 		.4byte	0x8c
 1623 035c 02       		.uleb128 0x2
 1624 035d 91       		.byte	0x91
 1625 035e 76       		.sleb128 -10
 1626 035f 00       		.byte	0
 1627 0360 0F       		.uleb128 0xf
 1628 0361 56020000 		.4byte	.LASF51
 1629 0365 01       		.byte	0x1
 1630 0366 0703     		.2byte	0x307
 1631 0368 97000000 		.4byte	0x97
 1632 036c 00000000 		.4byte	.LFB16
 1633 0370 98000000 		.4byte	.LFE16-.LFB16
 1634 0374 01       		.uleb128 0x1
 1635 0375 9C       		.byte	0x9c
 1636 0376 A8030000 		.4byte	0x3a8
 1637 037a 0D       		.uleb128 0xd
 1638 037b 41020000 		.4byte	.LASF33
 1639 037f 01       		.byte	0x1
 1640 0380 0703     		.2byte	0x307
 1641 0382 81000000 		.4byte	0x81
 1642 0386 02       		.uleb128 0x2
 1643 0387 91       		.byte	0x91
 1644 0388 64       		.sleb128 -28
 1645 0389 0D       		.uleb128 0xd
 1646 038a C9010000 		.4byte	.LASF49
 1647 038e 01       		.byte	0x1
 1648 038f 0703     		.2byte	0x307
 1649 0391 8C000000 		.4byte	0x8c
 1650 0395 02       		.uleb128 0x2
 1651 0396 91       		.byte	0x91
 1652 0397 62       		.sleb128 -30
 1653 0398 0E       		.uleb128 0xe
 1654 0399 71000000 		.4byte	.LASF52
 1655 039d 01       		.byte	0x1
 1656 039e 0903     		.2byte	0x309
 1657 03a0 BB000000 		.4byte	0xbb
 1658 03a4 02       		.uleb128 0x2
 1659 03a5 91       		.byte	0x91
 1660 03a6 68       		.sleb128 -24
 1661 03a7 00       		.byte	0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 45


 1662 03a8 0F       		.uleb128 0xf
 1663 03a9 6A020000 		.4byte	.LASF53
 1664 03ad 01       		.byte	0x1
 1665 03ae 3403     		.2byte	0x334
 1666 03b0 A2000000 		.4byte	0xa2
 1667 03b4 00000000 		.4byte	.LFB17
 1668 03b8 80000000 		.4byte	.LFE17-.LFB17
 1669 03bc 01       		.uleb128 0x1
 1670 03bd 9C       		.byte	0x9c
 1671 03be F0030000 		.4byte	0x3f0
 1672 03c2 0D       		.uleb128 0xd
 1673 03c3 41020000 		.4byte	.LASF33
 1674 03c7 01       		.byte	0x1
 1675 03c8 3403     		.2byte	0x334
 1676 03ca 81000000 		.4byte	0x81
 1677 03ce 02       		.uleb128 0x2
 1678 03cf 91       		.byte	0x91
 1679 03d0 64       		.sleb128 -28
 1680 03d1 0D       		.uleb128 0xd
 1681 03d2 C9010000 		.4byte	.LASF49
 1682 03d6 01       		.byte	0x1
 1683 03d7 3403     		.2byte	0x334
 1684 03d9 8C000000 		.4byte	0x8c
 1685 03dd 02       		.uleb128 0x2
 1686 03de 91       		.byte	0x91
 1687 03df 62       		.sleb128 -30
 1688 03e0 0E       		.uleb128 0xe
 1689 03e1 3B020000 		.4byte	.LASF54
 1690 03e5 01       		.byte	0x1
 1691 03e6 3603     		.2byte	0x336
 1692 03e8 A2000000 		.4byte	0xa2
 1693 03ec 02       		.uleb128 0x2
 1694 03ed 91       		.byte	0x91
 1695 03ee 6C       		.sleb128 -20
 1696 03ef 00       		.byte	0
 1697 03f0 12       		.uleb128 0x12
 1698 03f1 81000000 		.4byte	0x81
 1699 03f5 00040000 		.4byte	0x400
 1700 03f9 13       		.uleb128 0x13
 1701 03fa DE000000 		.4byte	0xde
 1702 03fe 00       		.byte	0
 1703 03ff 00       		.byte	0
 1704 0400 09       		.uleb128 0x9
 1705 0401 0E000000 		.4byte	.LASF55
 1706 0405 01       		.byte	0x1
 1707 0406 21       		.byte	0x21
 1708 0407 11040000 		.4byte	0x411
 1709 040b 05       		.uleb128 0x5
 1710 040c 03       		.byte	0x3
 1711 040d 00000000 		.4byte	ADC_channelsConfig
 1712 0411 14       		.uleb128 0x14
 1713 0412 F0030000 		.4byte	0x3f0
 1714 0416 15       		.uleb128 0x15
 1715 0417 E5020000 		.4byte	.LASF56
 1716 041b 01       		.byte	0x1
 1717 041c 18       		.byte	0x18
 1718 041d 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 46


 1719 0421 05       		.uleb128 0x5
 1720 0422 03       		.byte	0x3
 1721 0423 00000000 		.4byte	ADC_initVar
 1722 0427 12       		.uleb128 0x12
 1723 0428 8C000000 		.4byte	0x8c
 1724 042c 37040000 		.4byte	0x437
 1725 0430 13       		.uleb128 0x13
 1726 0431 DE000000 		.4byte	0xde
 1727 0435 00       		.byte	0
 1728 0436 00       		.byte	0
 1729 0437 15       		.uleb128 0x15
 1730 0438 C2000000 		.4byte	.LASF57
 1731 043c 01       		.byte	0x1
 1732 043d 19       		.byte	0x19
 1733 043e 48040000 		.4byte	0x448
 1734 0442 05       		.uleb128 0x5
 1735 0443 03       		.byte	0x3
 1736 0444 00000000 		.4byte	ADC_offset
 1737 0448 06       		.uleb128 0x6
 1738 0449 27040000 		.4byte	0x427
 1739 044d 12       		.uleb128 0x12
 1740 044e 97000000 		.4byte	0x97
 1741 0452 5D040000 		.4byte	0x45d
 1742 0456 13       		.uleb128 0x13
 1743 0457 DE000000 		.4byte	0xde
 1744 045b 00       		.byte	0
 1745 045c 00       		.byte	0
 1746 045d 15       		.uleb128 0x15
 1747 045e B7020000 		.4byte	.LASF58
 1748 0462 01       		.byte	0x1
 1749 0463 1A       		.byte	0x1a
 1750 0464 6E040000 		.4byte	0x46e
 1751 0468 05       		.uleb128 0x5
 1752 0469 03       		.byte	0x3
 1753 046a 00000000 		.4byte	ADC_countsPer10Volt
 1754 046e 06       		.uleb128 0x6
 1755 046f 4D040000 		.4byte	0x44d
 1756 0473 00       		.byte	0
 1757              		.section	.debug_abbrev,"",%progbits
 1758              	.Ldebug_abbrev0:
 1759 0000 01       		.uleb128 0x1
 1760 0001 11       		.uleb128 0x11
 1761 0002 01       		.byte	0x1
 1762 0003 25       		.uleb128 0x25
 1763 0004 0E       		.uleb128 0xe
 1764 0005 13       		.uleb128 0x13
 1765 0006 0B       		.uleb128 0xb
 1766 0007 03       		.uleb128 0x3
 1767 0008 0E       		.uleb128 0xe
 1768 0009 1B       		.uleb128 0x1b
 1769 000a 0E       		.uleb128 0xe
 1770 000b 55       		.uleb128 0x55
 1771 000c 17       		.uleb128 0x17
 1772 000d 11       		.uleb128 0x11
 1773 000e 01       		.uleb128 0x1
 1774 000f 10       		.uleb128 0x10
 1775 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 47


 1776 0011 00       		.byte	0
 1777 0012 00       		.byte	0
 1778 0013 02       		.uleb128 0x2
 1779 0014 24       		.uleb128 0x24
 1780 0015 00       		.byte	0
 1781 0016 0B       		.uleb128 0xb
 1782 0017 0B       		.uleb128 0xb
 1783 0018 3E       		.uleb128 0x3e
 1784 0019 0B       		.uleb128 0xb
 1785 001a 03       		.uleb128 0x3
 1786 001b 0E       		.uleb128 0xe
 1787 001c 00       		.byte	0
 1788 001d 00       		.byte	0
 1789 001e 03       		.uleb128 0x3
 1790 001f 24       		.uleb128 0x24
 1791 0020 00       		.byte	0
 1792 0021 0B       		.uleb128 0xb
 1793 0022 0B       		.uleb128 0xb
 1794 0023 3E       		.uleb128 0x3e
 1795 0024 0B       		.uleb128 0xb
 1796 0025 03       		.uleb128 0x3
 1797 0026 08       		.uleb128 0x8
 1798 0027 00       		.byte	0
 1799 0028 00       		.byte	0
 1800 0029 04       		.uleb128 0x4
 1801 002a 16       		.uleb128 0x16
 1802 002b 00       		.byte	0
 1803 002c 03       		.uleb128 0x3
 1804 002d 0E       		.uleb128 0xe
 1805 002e 3A       		.uleb128 0x3a
 1806 002f 0B       		.uleb128 0xb
 1807 0030 3B       		.uleb128 0x3b
 1808 0031 0B       		.uleb128 0xb
 1809 0032 49       		.uleb128 0x49
 1810 0033 13       		.uleb128 0x13
 1811 0034 00       		.byte	0
 1812 0035 00       		.byte	0
 1813 0036 05       		.uleb128 0x5
 1814 0037 16       		.uleb128 0x16
 1815 0038 00       		.byte	0
 1816 0039 03       		.uleb128 0x3
 1817 003a 0E       		.uleb128 0xe
 1818 003b 3A       		.uleb128 0x3a
 1819 003c 0B       		.uleb128 0xb
 1820 003d 3B       		.uleb128 0x3b
 1821 003e 05       		.uleb128 0x5
 1822 003f 49       		.uleb128 0x49
 1823 0040 13       		.uleb128 0x13
 1824 0041 00       		.byte	0
 1825 0042 00       		.byte	0
 1826 0043 06       		.uleb128 0x6
 1827 0044 35       		.uleb128 0x35
 1828 0045 00       		.byte	0
 1829 0046 49       		.uleb128 0x49
 1830 0047 13       		.uleb128 0x13
 1831 0048 00       		.byte	0
 1832 0049 00       		.byte	0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 48


 1833 004a 07       		.uleb128 0x7
 1834 004b 2E       		.uleb128 0x2e
 1835 004c 00       		.byte	0
 1836 004d 3F       		.uleb128 0x3f
 1837 004e 19       		.uleb128 0x19
 1838 004f 03       		.uleb128 0x3
 1839 0050 0E       		.uleb128 0xe
 1840 0051 3A       		.uleb128 0x3a
 1841 0052 0B       		.uleb128 0xb
 1842 0053 3B       		.uleb128 0x3b
 1843 0054 0B       		.uleb128 0xb
 1844 0055 27       		.uleb128 0x27
 1845 0056 19       		.uleb128 0x19
 1846 0057 11       		.uleb128 0x11
 1847 0058 01       		.uleb128 0x1
 1848 0059 12       		.uleb128 0x12
 1849 005a 06       		.uleb128 0x6
 1850 005b 40       		.uleb128 0x40
 1851 005c 18       		.uleb128 0x18
 1852 005d 9642     		.uleb128 0x2116
 1853 005f 19       		.uleb128 0x19
 1854 0060 00       		.byte	0
 1855 0061 00       		.byte	0
 1856 0062 08       		.uleb128 0x8
 1857 0063 2E       		.uleb128 0x2e
 1858 0064 01       		.byte	0x1
 1859 0065 3F       		.uleb128 0x3f
 1860 0066 19       		.uleb128 0x19
 1861 0067 03       		.uleb128 0x3
 1862 0068 0E       		.uleb128 0xe
 1863 0069 3A       		.uleb128 0x3a
 1864 006a 0B       		.uleb128 0xb
 1865 006b 3B       		.uleb128 0x3b
 1866 006c 0B       		.uleb128 0xb
 1867 006d 27       		.uleb128 0x27
 1868 006e 19       		.uleb128 0x19
 1869 006f 11       		.uleb128 0x11
 1870 0070 01       		.uleb128 0x1
 1871 0071 12       		.uleb128 0x12
 1872 0072 06       		.uleb128 0x6
 1873 0073 40       		.uleb128 0x40
 1874 0074 18       		.uleb128 0x18
 1875 0075 9642     		.uleb128 0x2116
 1876 0077 19       		.uleb128 0x19
 1877 0078 01       		.uleb128 0x1
 1878 0079 13       		.uleb128 0x13
 1879 007a 00       		.byte	0
 1880 007b 00       		.byte	0
 1881 007c 09       		.uleb128 0x9
 1882 007d 34       		.uleb128 0x34
 1883 007e 00       		.byte	0
 1884 007f 03       		.uleb128 0x3
 1885 0080 0E       		.uleb128 0xe
 1886 0081 3A       		.uleb128 0x3a
 1887 0082 0B       		.uleb128 0xb
 1888 0083 3B       		.uleb128 0x3b
 1889 0084 0B       		.uleb128 0xb
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 49


 1890 0085 49       		.uleb128 0x49
 1891 0086 13       		.uleb128 0x13
 1892 0087 02       		.uleb128 0x2
 1893 0088 18       		.uleb128 0x18
 1894 0089 00       		.byte	0
 1895 008a 00       		.byte	0
 1896 008b 0A       		.uleb128 0xa
 1897 008c 2E       		.uleb128 0x2e
 1898 008d 00       		.byte	0
 1899 008e 3F       		.uleb128 0x3f
 1900 008f 19       		.uleb128 0x19
 1901 0090 03       		.uleb128 0x3
 1902 0091 0E       		.uleb128 0xe
 1903 0092 3A       		.uleb128 0x3a
 1904 0093 0B       		.uleb128 0xb
 1905 0094 3B       		.uleb128 0x3b
 1906 0095 05       		.uleb128 0x5
 1907 0096 27       		.uleb128 0x27
 1908 0097 19       		.uleb128 0x19
 1909 0098 11       		.uleb128 0x11
 1910 0099 01       		.uleb128 0x1
 1911 009a 12       		.uleb128 0x12
 1912 009b 06       		.uleb128 0x6
 1913 009c 40       		.uleb128 0x40
 1914 009d 18       		.uleb128 0x18
 1915 009e 9642     		.uleb128 0x2116
 1916 00a0 19       		.uleb128 0x19
 1917 00a1 00       		.byte	0
 1918 00a2 00       		.byte	0
 1919 00a3 0B       		.uleb128 0xb
 1920 00a4 2E       		.uleb128 0x2e
 1921 00a5 00       		.byte	0
 1922 00a6 3F       		.uleb128 0x3f
 1923 00a7 19       		.uleb128 0x19
 1924 00a8 03       		.uleb128 0x3
 1925 00a9 0E       		.uleb128 0xe
 1926 00aa 3A       		.uleb128 0x3a
 1927 00ab 0B       		.uleb128 0xb
 1928 00ac 3B       		.uleb128 0x3b
 1929 00ad 05       		.uleb128 0x5
 1930 00ae 27       		.uleb128 0x27
 1931 00af 19       		.uleb128 0x19
 1932 00b0 11       		.uleb128 0x11
 1933 00b1 01       		.uleb128 0x1
 1934 00b2 12       		.uleb128 0x12
 1935 00b3 06       		.uleb128 0x6
 1936 00b4 40       		.uleb128 0x40
 1937 00b5 18       		.uleb128 0x18
 1938 00b6 9742     		.uleb128 0x2117
 1939 00b8 19       		.uleb128 0x19
 1940 00b9 00       		.byte	0
 1941 00ba 00       		.byte	0
 1942 00bb 0C       		.uleb128 0xc
 1943 00bc 2E       		.uleb128 0x2e
 1944 00bd 01       		.byte	0x1
 1945 00be 3F       		.uleb128 0x3f
 1946 00bf 19       		.uleb128 0x19
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 50


 1947 00c0 03       		.uleb128 0x3
 1948 00c1 0E       		.uleb128 0xe
 1949 00c2 3A       		.uleb128 0x3a
 1950 00c3 0B       		.uleb128 0xb
 1951 00c4 3B       		.uleb128 0x3b
 1952 00c5 05       		.uleb128 0x5
 1953 00c6 27       		.uleb128 0x27
 1954 00c7 19       		.uleb128 0x19
 1955 00c8 49       		.uleb128 0x49
 1956 00c9 13       		.uleb128 0x13
 1957 00ca 11       		.uleb128 0x11
 1958 00cb 01       		.uleb128 0x1
 1959 00cc 12       		.uleb128 0x12
 1960 00cd 06       		.uleb128 0x6
 1961 00ce 40       		.uleb128 0x40
 1962 00cf 18       		.uleb128 0x18
 1963 00d0 9742     		.uleb128 0x2117
 1964 00d2 19       		.uleb128 0x19
 1965 00d3 01       		.uleb128 0x1
 1966 00d4 13       		.uleb128 0x13
 1967 00d5 00       		.byte	0
 1968 00d6 00       		.byte	0
 1969 00d7 0D       		.uleb128 0xd
 1970 00d8 05       		.uleb128 0x5
 1971 00d9 00       		.byte	0
 1972 00da 03       		.uleb128 0x3
 1973 00db 0E       		.uleb128 0xe
 1974 00dc 3A       		.uleb128 0x3a
 1975 00dd 0B       		.uleb128 0xb
 1976 00de 3B       		.uleb128 0x3b
 1977 00df 05       		.uleb128 0x5
 1978 00e0 49       		.uleb128 0x49
 1979 00e1 13       		.uleb128 0x13
 1980 00e2 02       		.uleb128 0x2
 1981 00e3 18       		.uleb128 0x18
 1982 00e4 00       		.byte	0
 1983 00e5 00       		.byte	0
 1984 00e6 0E       		.uleb128 0xe
 1985 00e7 34       		.uleb128 0x34
 1986 00e8 00       		.byte	0
 1987 00e9 03       		.uleb128 0x3
 1988 00ea 0E       		.uleb128 0xe
 1989 00eb 3A       		.uleb128 0x3a
 1990 00ec 0B       		.uleb128 0xb
 1991 00ed 3B       		.uleb128 0x3b
 1992 00ee 05       		.uleb128 0x5
 1993 00ef 49       		.uleb128 0x49
 1994 00f0 13       		.uleb128 0x13
 1995 00f1 02       		.uleb128 0x2
 1996 00f2 18       		.uleb128 0x18
 1997 00f3 00       		.byte	0
 1998 00f4 00       		.byte	0
 1999 00f5 0F       		.uleb128 0xf
 2000 00f6 2E       		.uleb128 0x2e
 2001 00f7 01       		.byte	0x1
 2002 00f8 3F       		.uleb128 0x3f
 2003 00f9 19       		.uleb128 0x19
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 51


 2004 00fa 03       		.uleb128 0x3
 2005 00fb 0E       		.uleb128 0xe
 2006 00fc 3A       		.uleb128 0x3a
 2007 00fd 0B       		.uleb128 0xb
 2008 00fe 3B       		.uleb128 0x3b
 2009 00ff 05       		.uleb128 0x5
 2010 0100 27       		.uleb128 0x27
 2011 0101 19       		.uleb128 0x19
 2012 0102 49       		.uleb128 0x49
 2013 0103 13       		.uleb128 0x13
 2014 0104 11       		.uleb128 0x11
 2015 0105 01       		.uleb128 0x1
 2016 0106 12       		.uleb128 0x12
 2017 0107 06       		.uleb128 0x6
 2018 0108 40       		.uleb128 0x40
 2019 0109 18       		.uleb128 0x18
 2020 010a 9642     		.uleb128 0x2116
 2021 010c 19       		.uleb128 0x19
 2022 010d 01       		.uleb128 0x1
 2023 010e 13       		.uleb128 0x13
 2024 010f 00       		.byte	0
 2025 0110 00       		.byte	0
 2026 0111 10       		.uleb128 0x10
 2027 0112 2E       		.uleb128 0x2e
 2028 0113 01       		.byte	0x1
 2029 0114 3F       		.uleb128 0x3f
 2030 0115 19       		.uleb128 0x19
 2031 0116 03       		.uleb128 0x3
 2032 0117 0E       		.uleb128 0xe
 2033 0118 3A       		.uleb128 0x3a
 2034 0119 0B       		.uleb128 0xb
 2035 011a 3B       		.uleb128 0x3b
 2036 011b 05       		.uleb128 0x5
 2037 011c 27       		.uleb128 0x27
 2038 011d 19       		.uleb128 0x19
 2039 011e 11       		.uleb128 0x11
 2040 011f 01       		.uleb128 0x1
 2041 0120 12       		.uleb128 0x12
 2042 0121 06       		.uleb128 0x6
 2043 0122 40       		.uleb128 0x40
 2044 0123 18       		.uleb128 0x18
 2045 0124 9742     		.uleb128 0x2117
 2046 0126 19       		.uleb128 0x19
 2047 0127 01       		.uleb128 0x1
 2048 0128 13       		.uleb128 0x13
 2049 0129 00       		.byte	0
 2050 012a 00       		.byte	0
 2051 012b 11       		.uleb128 0x11
 2052 012c 2E       		.uleb128 0x2e
 2053 012d 01       		.byte	0x1
 2054 012e 3F       		.uleb128 0x3f
 2055 012f 19       		.uleb128 0x19
 2056 0130 03       		.uleb128 0x3
 2057 0131 0E       		.uleb128 0xe
 2058 0132 3A       		.uleb128 0x3a
 2059 0133 0B       		.uleb128 0xb
 2060 0134 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 52


 2061 0135 05       		.uleb128 0x5
 2062 0136 27       		.uleb128 0x27
 2063 0137 19       		.uleb128 0x19
 2064 0138 11       		.uleb128 0x11
 2065 0139 01       		.uleb128 0x1
 2066 013a 12       		.uleb128 0x12
 2067 013b 06       		.uleb128 0x6
 2068 013c 40       		.uleb128 0x40
 2069 013d 18       		.uleb128 0x18
 2070 013e 9642     		.uleb128 0x2116
 2071 0140 19       		.uleb128 0x19
 2072 0141 01       		.uleb128 0x1
 2073 0142 13       		.uleb128 0x13
 2074 0143 00       		.byte	0
 2075 0144 00       		.byte	0
 2076 0145 12       		.uleb128 0x12
 2077 0146 01       		.uleb128 0x1
 2078 0147 01       		.byte	0x1
 2079 0148 49       		.uleb128 0x49
 2080 0149 13       		.uleb128 0x13
 2081 014a 01       		.uleb128 0x1
 2082 014b 13       		.uleb128 0x13
 2083 014c 00       		.byte	0
 2084 014d 00       		.byte	0
 2085 014e 13       		.uleb128 0x13
 2086 014f 21       		.uleb128 0x21
 2087 0150 00       		.byte	0
 2088 0151 49       		.uleb128 0x49
 2089 0152 13       		.uleb128 0x13
 2090 0153 2F       		.uleb128 0x2f
 2091 0154 0B       		.uleb128 0xb
 2092 0155 00       		.byte	0
 2093 0156 00       		.byte	0
 2094 0157 14       		.uleb128 0x14
 2095 0158 26       		.uleb128 0x26
 2096 0159 00       		.byte	0
 2097 015a 49       		.uleb128 0x49
 2098 015b 13       		.uleb128 0x13
 2099 015c 00       		.byte	0
 2100 015d 00       		.byte	0
 2101 015e 15       		.uleb128 0x15
 2102 015f 34       		.uleb128 0x34
 2103 0160 00       		.byte	0
 2104 0161 03       		.uleb128 0x3
 2105 0162 0E       		.uleb128 0xe
 2106 0163 3A       		.uleb128 0x3a
 2107 0164 0B       		.uleb128 0xb
 2108 0165 3B       		.uleb128 0x3b
 2109 0166 0B       		.uleb128 0xb
 2110 0167 49       		.uleb128 0x49
 2111 0168 13       		.uleb128 0x13
 2112 0169 3F       		.uleb128 0x3f
 2113 016a 19       		.uleb128 0x19
 2114 016b 02       		.uleb128 0x2
 2115 016c 18       		.uleb128 0x18
 2116 016d 00       		.byte	0
 2117 016e 00       		.byte	0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 53


 2118 016f 00       		.byte	0
 2119              		.section	.debug_aranges,"",%progbits
 2120 0000 A4000000 		.4byte	0xa4
 2121 0004 0200     		.2byte	0x2
 2122 0006 00000000 		.4byte	.Ldebug_info0
 2123 000a 04       		.byte	0x4
 2124 000b 00       		.byte	0
 2125 000c 0000     		.2byte	0
 2126 000e 0000     		.2byte	0
 2127 0010 00000000 		.4byte	.LFB0
 2128 0014 24000000 		.4byte	.LFE0-.LFB0
 2129 0018 00000000 		.4byte	.LFB1
 2130 001c A8010000 		.4byte	.LFE1-.LFB1
 2131 0020 00000000 		.4byte	.LFB2
 2132 0024 28000000 		.4byte	.LFE2-.LFB2
 2133 0028 00000000 		.4byte	.LFB3
 2134 002c 18000000 		.4byte	.LFE3-.LFB3
 2135 0030 00000000 		.4byte	.LFB4
 2136 0034 1C000000 		.4byte	.LFE4-.LFB4
 2137 0038 00000000 		.4byte	.LFB5
 2138 003c 1C000000 		.4byte	.LFE5-.LFB5
 2139 0040 00000000 		.4byte	.LFB6
 2140 0044 48000000 		.4byte	.LFE6-.LFB6
 2141 0048 00000000 		.4byte	.LFB7
 2142 004c 44000000 		.4byte	.LFE7-.LFB7
 2143 0050 00000000 		.4byte	.LFB8
 2144 0054 1C000000 		.4byte	.LFE8-.LFB8
 2145 0058 00000000 		.4byte	.LFB9
 2146 005c 30000000 		.4byte	.LFE9-.LFB9
 2147 0060 00000000 		.4byte	.LFB10
 2148 0064 2C000000 		.4byte	.LFE10-.LFB10
 2149 0068 00000000 		.4byte	.LFB11
 2150 006c 1C000000 		.4byte	.LFE11-.LFB11
 2151 0070 00000000 		.4byte	.LFB12
 2152 0074 1C000000 		.4byte	.LFE12-.LFB12
 2153 0078 00000000 		.4byte	.LFB13
 2154 007c 30000000 		.4byte	.LFE13-.LFB13
 2155 0080 00000000 		.4byte	.LFB14
 2156 0084 2C000000 		.4byte	.LFE14-.LFB14
 2157 0088 00000000 		.4byte	.LFB15
 2158 008c A4000000 		.4byte	.LFE15-.LFB15
 2159 0090 00000000 		.4byte	.LFB16
 2160 0094 98000000 		.4byte	.LFE16-.LFB16
 2161 0098 00000000 		.4byte	.LFB17
 2162 009c 80000000 		.4byte	.LFE17-.LFB17
 2163 00a0 00000000 		.4byte	0
 2164 00a4 00000000 		.4byte	0
 2165              		.section	.debug_ranges,"",%progbits
 2166              	.Ldebug_ranges0:
 2167 0000 00000000 		.4byte	.LFB0
 2168 0004 24000000 		.4byte	.LFE0
 2169 0008 00000000 		.4byte	.LFB1
 2170 000c A8010000 		.4byte	.LFE1
 2171 0010 00000000 		.4byte	.LFB2
 2172 0014 28000000 		.4byte	.LFE2
 2173 0018 00000000 		.4byte	.LFB3
 2174 001c 18000000 		.4byte	.LFE3
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 54


 2175 0020 00000000 		.4byte	.LFB4
 2176 0024 1C000000 		.4byte	.LFE4
 2177 0028 00000000 		.4byte	.LFB5
 2178 002c 1C000000 		.4byte	.LFE5
 2179 0030 00000000 		.4byte	.LFB6
 2180 0034 48000000 		.4byte	.LFE6
 2181 0038 00000000 		.4byte	.LFB7
 2182 003c 44000000 		.4byte	.LFE7
 2183 0040 00000000 		.4byte	.LFB8
 2184 0044 1C000000 		.4byte	.LFE8
 2185 0048 00000000 		.4byte	.LFB9
 2186 004c 30000000 		.4byte	.LFE9
 2187 0050 00000000 		.4byte	.LFB10
 2188 0054 2C000000 		.4byte	.LFE10
 2189 0058 00000000 		.4byte	.LFB11
 2190 005c 1C000000 		.4byte	.LFE11
 2191 0060 00000000 		.4byte	.LFB12
 2192 0064 1C000000 		.4byte	.LFE12
 2193 0068 00000000 		.4byte	.LFB13
 2194 006c 30000000 		.4byte	.LFE13
 2195 0070 00000000 		.4byte	.LFB14
 2196 0074 2C000000 		.4byte	.LFE14
 2197 0078 00000000 		.4byte	.LFB15
 2198 007c A4000000 		.4byte	.LFE15
 2199 0080 00000000 		.4byte	.LFB16
 2200 0084 98000000 		.4byte	.LFE16
 2201 0088 00000000 		.4byte	.LFB17
 2202 008c 80000000 		.4byte	.LFE17
 2203 0090 00000000 		.4byte	0
 2204 0094 00000000 		.4byte	0
 2205              		.section	.debug_line,"",%progbits
 2206              	.Ldebug_line0:
 2207 0000 2D020000 		.section	.debug_str,"MS",%progbits,1
 2207      02004200 
 2207      00000201 
 2207      FB0E0D00 
 2207      01010101 
 2208              	.LASF6:
 2209 0000 6C6F6E67 		.ascii	"long long int\000"
 2209      206C6F6E 
 2209      6720696E 
 2209      7400
 2210              	.LASF55:
 2211 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2211      6368616E 
 2211      6E656C73 
 2211      436F6E66 
 2211      696700
 2212              	.LASF19:
 2213 0021 72656733 		.ascii	"reg32\000"
 2213      3200
 2214              	.LASF60:
 2215 0027 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2215      6E657261 
 2215      7465645F 
 2215      536F7572 
 2215      63655C50 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 55


 2216              	.LASF45:
 2217 0046 6F666673 		.ascii	"offset\000"
 2217      657400
 2218              	.LASF15:
 2219 004d 666C6F61 		.ascii	"float\000"
 2219      7400
 2220              	.LASF41:
 2221 0053 68696768 		.ascii	"highLimit\000"
 2221      4C696D69 
 2221      7400
 2222              	.LASF48:
 2223 005d 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2223      436F756E 
 2223      7473546F 
 2223      5F6D566F 
 2223      6C747300 
 2224              	.LASF52:
 2225 0071 75566F6C 		.ascii	"uVolts\000"
 2225      747300
 2226              	.LASF3:
 2227 0078 73686F72 		.ascii	"short unsigned int\000"
 2227      7420756E 
 2227      7369676E 
 2227      65642069 
 2227      6E7400
 2228              	.LASF2:
 2229 008b 73686F72 		.ascii	"short int\000"
 2229      7420696E 
 2229      7400
 2230              	.LASF44:
 2231 0095 4144435F 		.ascii	"ADC_SetOffset\000"
 2231      5365744F 
 2231      66667365 
 2231      7400
 2232              	.LASF38:
 2233 00a3 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2233      5365744C 
 2233      6F774C69 
 2233      6D697400 
 2234              	.LASF29:
 2235 00b3 73746174 		.ascii	"status\000"
 2235      757300
 2236              	.LASF14:
 2237 00ba 666C6F61 		.ascii	"float32\000"
 2237      74333200 
 2238              	.LASF57:
 2239 00c2 4144435F 		.ascii	"ADC_offset\000"
 2239      6F666673 
 2239      657400
 2240              	.LASF22:
 2241 00cd 746D7052 		.ascii	"tmpRegVal\000"
 2241      65675661 
 2241      6C00
 2242              	.LASF46:
 2243 00d7 4144435F 		.ascii	"ADC_SetGain\000"
 2243      53657447 
 2243      61696E00 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 56


 2244              	.LASF61:
 2245 00e3 433A5C55 		.ascii	"C:\\Users\\Karsten\\Desktop\\IHA\\3. Semester\\Proj"
 2245      73657273 
 2245      5C4B6172 
 2245      7374656E 
 2245      5C446573 
 2246 0110 656B745C 		.ascii	"ekt\\PHProbe\\PHProbe.cydsn\000"
 2246      50485072 
 2246      6F62655C 
 2246      50485072 
 2246      6F62652E 
 2247              	.LASF1:
 2248 012a 756E7369 		.ascii	"unsigned char\000"
 2248      676E6564 
 2248      20636861 
 2248      7200
 2249              	.LASF40:
 2250 0138 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2250      53657448 
 2250      6967684C 
 2250      696D6974 
 2250      00
 2251              	.LASF12:
 2252 0149 696E7431 		.ascii	"int16\000"
 2252      3600
 2253              	.LASF5:
 2254 014f 6C6F6E67 		.ascii	"long unsigned int\000"
 2254      20756E73 
 2254      69676E65 
 2254      6420696E 
 2254      7400
 2255              	.LASF13:
 2256 0161 696E7433 		.ascii	"int32\000"
 2256      3200
 2257              	.LASF31:
 2258 0167 4144435F 		.ascii	"ADC_GetResult16\000"
 2258      47657452 
 2258      6573756C 
 2258      74313600 
 2259              	.LASF36:
 2260 0177 4144435F 		.ascii	"ADC_SetChanMask\000"
 2260      53657443 
 2260      68616E4D 
 2260      61736B00 
 2261              	.LASF43:
 2262 0187 4144435F 		.ascii	"ADC_SetSatMask\000"
 2262      53657453 
 2262      61744D61 
 2262      736B00
 2263              	.LASF30:
 2264 0196 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2264      4973456E 
 2264      64436F6E 
 2264      76657273 
 2264      696F6E00 
 2265              	.LASF16:
 2266 01aa 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 57


 2266      6C6500
 2267              	.LASF39:
 2268 01b1 6C6F774C 		.ascii	"lowLimit\000"
 2268      696D6974 
 2268      00
 2269              	.LASF47:
 2270 01ba 61646347 		.ascii	"adcGain\000"
 2270      61696E00 
 2271              	.LASF10:
 2272 01c2 75696E74 		.ascii	"uint16\000"
 2272      313600
 2273              	.LASF49:
 2274 01c9 61646343 		.ascii	"adcCounts\000"
 2274      6F756E74 
 2274      7300
 2275              	.LASF11:
 2276 01d3 75696E74 		.ascii	"uint32\000"
 2276      333200
 2277              	.LASF42:
 2278 01da 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2278      5365744C 
 2278      696D6974 
 2278      4D61736B 
 2278      00
 2279              	.LASF8:
 2280 01eb 756E7369 		.ascii	"unsigned int\000"
 2280      676E6564 
 2280      20696E74 
 2280      00
 2281              	.LASF25:
 2282 01f8 4144435F 		.ascii	"ADC_Enable\000"
 2282      456E6162 
 2282      6C6500
 2283              	.LASF23:
 2284 0203 636F756E 		.ascii	"counts\000"
 2284      747300
 2285              	.LASF7:
 2286 020a 6C6F6E67 		.ascii	"long long unsigned int\000"
 2286      206C6F6E 
 2286      6720756E 
 2286      7369676E 
 2286      65642069 
 2287              	.LASF34:
 2288 0221 72657375 		.ascii	"result\000"
 2288      6C7400
 2289              	.LASF24:
 2290 0228 4144435F 		.ascii	"ADC_Start\000"
 2290      53746172 
 2290      7400
 2291              	.LASF35:
 2292 0232 4144435F 		.ascii	"ADC_Init\000"
 2292      496E6974 
 2292      00
 2293              	.LASF54:
 2294 023b 766F6C74 		.ascii	"volts\000"
 2294      7300
 2295              	.LASF33:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 58


 2296 0241 6368616E 		.ascii	"chan\000"
 2296      00
 2297              	.LASF50:
 2298 0246 6D566F6C 		.ascii	"mVolts\000"
 2298      747300
 2299              	.LASF20:
 2300 024d 73697A65 		.ascii	"sizetype\000"
 2300      74797065 
 2300      00
 2301              	.LASF51:
 2302 0256 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2302      436F756E 
 2302      7473546F 
 2302      5F75566F 
 2302      6C747300 
 2303              	.LASF53:
 2304 026a 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2304      436F756E 
 2304      7473546F 
 2304      5F566F6C 
 2304      747300
 2305              	.LASF27:
 2306 027d 4144435F 		.ascii	"ADC_StartConvert\000"
 2306      53746172 
 2306      74436F6E 
 2306      76657274 
 2306      00
 2307              	.LASF37:
 2308 028e 6D61736B 		.ascii	"mask\000"
 2308      00
 2309              	.LASF21:
 2310 0293 63684E75 		.ascii	"chNum\000"
 2310      6D00
 2311              	.LASF32:
 2312 0299 7265744D 		.ascii	"retMode\000"
 2312      6F646500 
 2313              	.LASF28:
 2314 02a1 4144435F 		.ascii	"ADC_StopConvert\000"
 2314      53746F70 
 2314      436F6E76 
 2314      65727400 
 2315              	.LASF9:
 2316 02b1 75696E74 		.ascii	"uint8\000"
 2316      3800
 2317              	.LASF58:
 2318 02b7 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2318      636F756E 
 2318      74735065 
 2318      72313056 
 2318      6F6C7400 
 2319              	.LASF4:
 2320 02cb 6C6F6E67 		.ascii	"long int\000"
 2320      20696E74 
 2320      00
 2321              	.LASF18:
 2322 02d4 63686172 		.ascii	"char\000"
 2322      00
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccZwvWrz.s 			page 59


 2323              	.LASF0:
 2324 02d9 7369676E 		.ascii	"signed char\000"
 2324      65642063 
 2324      68617200 
 2325              	.LASF56:
 2326 02e5 4144435F 		.ascii	"ADC_initVar\000"
 2326      696E6974 
 2326      56617200 
 2327              	.LASF59:
 2328 02f1 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2328      4320342E 
 2328      382E3420 
 2328      32303134 
 2328      30353236 
 2329 0324 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2329      20726576 
 2329      6973696F 
 2329      6E203231 
 2329      31333538 
 2330 0357 30202D66 		.ascii	"0 -ffunction-sections\000"
 2330      66756E63 
 2330      74696F6E 
 2330      2D736563 
 2330      74696F6E 
 2331              	.LASF17:
 2332 036d 696E7436 		.ascii	"int64\000"
 2332      3400
 2333              	.LASF26:
 2334 0373 4144435F 		.ascii	"ADC_Stop\000"
 2334      53746F70 
 2334      00
 2335              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
