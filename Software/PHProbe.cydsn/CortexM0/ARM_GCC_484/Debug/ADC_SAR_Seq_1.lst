ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_1_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_1_initVar, %object
  20              		.size	ADC_SAR_Seq_1_initVar, 1
  21              	ADC_SAR_Seq_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_1_offset,2,4
  24              		.comm	ADC_SAR_Seq_1_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_1_channelsConfig, 4
  29              	ADC_SAR_Seq_1_channelsConfig:
  30 0000 00050000 		.word	1280
  31              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_1_Start, %function
  37              	ADC_SAR_Seq_1_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000500u };
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_SAR_Seq_1_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_SAR_Seq_1_Init, %function
  80              	ADC_SAR_Seq_1_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 4


  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 5


 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  97              		.loc 1 141 0
  98 000e 4F4B     		ldr	r3, .L15
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 4D4B     		ldr	r3, .L15+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 4D4B     		ldr	r3, .L15+8
 108 0020 4D4A     		ldr	r2, .L15+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 4D4B     		ldr	r3, .L15+16
 112 0026 4E4A     		ldr	r2, .L15+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 4E4B     		ldr	r3, .L15+24
 116 002c 4E4A     		ldr	r2, .L15+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 4E4B     		ldr	r3, .L15+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 4E4B     		ldr	r3, .L15+36
 124 0038 4E4A     		ldr	r2, .L15+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 4E4B     		ldr	r3, .L15+44
 128 003e 4D4A     		ldr	r2, .L15+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 6


 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 130              		.loc 1 162 0
 131 0042 4E4B     		ldr	r3, .L15+48
 132 0044 0022     		mov	r2, #0
 133 0046 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 134              		.loc 1 163 0
 135 0048 4D4B     		ldr	r3, .L15+52
 136 004a 0022     		mov	r2, #0
 137 004c 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 138              		.loc 1 164 0
 139 004e 4D4B     		ldr	r3, .L15+56
 140 0050 0122     		mov	r2, #1
 141 0052 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 142              		.loc 1 167 0
 143 0054 4C4B     		ldr	r3, .L15+60
 144 0056 0222     		mov	r2, #2
 145 0058 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 146              		.loc 1 171 0
 147 005a 4C4B     		ldr	r3, .L15+64
 148 005c 1B68     		ldr	r3, [r3]
 149 005e 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 150              		.loc 1 172 0
 151 0060 7A68     		ldr	r2, [r7, #4]
 152 0062 4B4B     		ldr	r3, .L15+68
 153 0064 1340     		and	r3, r2
 154 0066 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 155              		.loc 1 178 0
 156 0068 7B68     		ldr	r3, [r7, #4]
 157 006a 0122     		mov	r2, #1
 158 006c 1343     		orr	r3, r2
 159 006e 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 7


 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 160              		.loc 1 191 0
 161 0070 464B     		ldr	r3, .L15+64
 162 0072 7A68     		ldr	r2, [r7, #4]
 163 0074 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 164              		.loc 1 197 0
 165 0076 0023     		mov	r3, #0
 166 0078 FB60     		str	r3, [r7, #12]
 167 007a 61E0     		b	.L6
 168              	.L14:
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 169              		.loc 1 199 0
 170 007c A023     		mov	r3, #160
 171 007e DA00     		lsl	r2, r3, #3
 172 0080 DC23     		mov	r3, #220
 173 0082 9B01     		lsl	r3, r3, #6
 174 0084 1340     		and	r3, r2
 175 0086 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 176              		.loc 1 218 0
 177 0088 FB68     		ldr	r3, [r7, #12]
 178 008a 9B00     		lsl	r3, r3, #2
 179 008c 414A     		ldr	r2, .L15+72
 180 008e 9B18     		add	r3, r3, r2
 181 0090 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 8


 182 0092 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 183              		.loc 1 220 0
 184 0094 A023     		mov	r3, #160
 185 0096 DA00     		lsl	r2, r3, #3
 186 0098 0123     		mov	r3, #1
 187 009a 1340     		and	r3, r2
 188 009c 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 189              		.loc 1 222 0
 190 009e 374B     		ldr	r3, .L15+48
 191 00a0 364A     		ldr	r2, .L15+48
 192 00a2 1168     		ldr	r1, [r2]
 193 00a4 FA68     		ldr	r2, [r7, #12]
 194 00a6 0120     		mov	r0, #1
 195 00a8 041C     		mov	r4, r0
 196 00aa 9440     		lsl	r4, r4, r2
 197 00ac 221C     		mov	r2, r4
 198 00ae 92B2     		uxth	r2, r2
 199 00b0 0A43     		orr	r2, r1
 200 00b2 1A60     		str	r2, [r3]
 201              	.L7:
 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 202              		.loc 1 225 0
 203 00b4 A023     		mov	r3, #160
 204 00b6 DA00     		lsl	r2, r3, #3
 205 00b8 0223     		mov	r3, #2
 206 00ba 1340     		and	r3, r2
 207 00bc 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 208              		.loc 1 227 0
 209 00be 304B     		ldr	r3, .L15+52
 210 00c0 2F4A     		ldr	r2, .L15+52
 211 00c2 1168     		ldr	r1, [r2]
 212 00c4 FA68     		ldr	r2, [r7, #12]
 213 00c6 0120     		mov	r0, #1
 214 00c8 041C     		mov	r4, r0
 215 00ca 9440     		lsl	r4, r4, r2
 216 00cc 221C     		mov	r2, r4
 217 00ce 92B2     		uxth	r2, r2
 218 00d0 0A43     		orr	r2, r1
 219 00d2 1A60     		str	r2, [r3]
 220              	.L8:
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 9


 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 221              		.loc 1 247 0
 222 00d4 A023     		mov	r3, #160
 223 00d6 DA00     		lsl	r2, r3, #3
 224 00d8 8023     		mov	r3, #128
 225 00da 9B00     		lsl	r3, r3, #2
 226 00dc 1340     		and	r3, r2
 227 00de 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 228              		.loc 1 249 0
 229 00e0 8023     		mov	r3, #128
 230 00e2 5B00     		lsl	r3, r3, #1
 231 00e4 BB60     		str	r3, [r7, #8]
 232 00e6 02E0     		b	.L10
 233              	.L9:
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 234              		.loc 1 253 0
 235 00e8 8023     		mov	r3, #128
 236 00ea 5B01     		lsl	r3, r3, #5
 237 00ec BB60     		str	r3, [r7, #8]
 238              	.L10:
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 239              		.loc 1 256 0
 240 00ee A023     		mov	r3, #160
 241 00f0 DA00     		lsl	r2, r3, #3
 242 00f2 8023     		mov	r3, #128
 243 00f4 5B00     		lsl	r3, r3, #1
 244 00f6 1340     		and	r3, r2
 245 00f8 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 246              		.loc 1 263 0
 247 00fa 274B     		ldr	r3, .L15+76
 248 00fc FA68     		ldr	r2, [r7, #12]
 249 00fe 5200     		lsl	r2, r2, #1
 250 0100 0021     		mov	r1, #0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 10


 251 0102 D152     		strh	r1, [r2, r3]
 252 0104 09E0     		b	.L12
 253              	.L11:
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 254              		.loc 1 270 0
 255 0106 BB68     		ldr	r3, [r7, #8]
 256 0108 002B     		cmp	r3, #0
 257 010a 00DA     		bge	.L13
 258 010c 0133     		add	r3, r3, #1
 259              	.L13:
 260 010e 5B10     		asr	r3, r3, #1
 261 0110 99B2     		uxth	r1, r3
 262 0112 214B     		ldr	r3, .L15+76
 263 0114 FA68     		ldr	r2, [r7, #12]
 264 0116 5200     		lsl	r2, r2, #1
 265 0118 D152     		strh	r1, [r2, r3]
 266              	.L12:
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 267              		.loc 1 276 0
 268 011a BB68     		ldr	r3, [r7, #8]
 269 011c 1F4A     		ldr	r2, .L15+80
 270 011e 5343     		mul	r3, r2
 271 0120 1F4A     		ldr	r2, .L15+84
 272 0122 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 273              		.loc 1 277 0
 274 0124 181C     		mov	r0, r3
 275 0126 1F49     		ldr	r1, .L15+88
 276 0128 FFF7FEFF 		bl	__aeabi_idiv
 277 012c 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 278              		.loc 1 276 0
 279 012e 9BB2     		uxth	r3, r3
 280 0130 19B2     		sxth	r1, r3
 281 0132 1D4B     		ldr	r3, .L15+92
 282 0134 FA68     		ldr	r2, [r7, #12]
 283 0136 9200     		lsl	r2, r2, #2
 284 0138 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 285              		.loc 1 197 0
 286 013a FB68     		ldr	r3, [r7, #12]
 287 013c 0133     		add	r3, r3, #1
 288 013e FB60     		str	r3, [r7, #12]
 289              	.L6:
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 290              		.loc 1 197 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 11


 291 0140 FB68     		ldr	r3, [r7, #12]
 292 0142 002B     		cmp	r3, #0
 293 0144 9AD0     		beq	.L14
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 294              		.loc 1 279 0 is_stmt 1
 295 0146 BD46     		mov	sp, r7
 296 0148 05B0     		add	sp, sp, #20
 297              		@ sp needed
 298 014a 90BD     		pop	{r4, r7, pc}
 299              	.L16:
 300              		.align	2
 301              	.L15:
 302 014c 00000000 		.word	ADC_SAR_Seq_1_ISR
 303 0150 20001A40 		.word	1075445792
 304 0154 00001A40 		.word	1075445760
 305 0158 70020053 		.word	1392509552
 306 015c 04001A40 		.word	1075445764
 307 0160 F4000080 		.word	-2147483404
 308 0164 18001A40 		.word	1075445784
 309 0168 0000FF07 		.word	134152192
 310 016c 1C001A40 		.word	1075445788
 311 0170 10001A40 		.word	1075445776
 312 0174 04000400 		.word	262148
 313 0178 14001A40 		.word	1075445780
 314 017c 28021A40 		.word	1075446312
 315 0180 38021A40 		.word	1075446328
 316 0184 18021A40 		.word	1075446296
 317 0188 000F1A40 		.word	1075449600
 318 018c 30001A40 		.word	1075445808
 319 0190 FFFFFFDF 		.word	-536870913
 320 0194 80001A40 		.word	1075445888
 321 0198 00000000 		.word	ADC_SAR_Seq_1_offset
 322 019c 10270000 		.word	10000
 323 01a0 E40C0000 		.word	3300
 324 01a4 C8190000 		.word	6600
 325 01a8 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 326              		.cfi_endproc
 327              	.LFE1:
 328              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 329              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 330              		.align	2
 331              		.global	ADC_SAR_Seq_1_Enable
 332              		.code	16
 333              		.thumb_func
 334              		.type	ADC_SAR_Seq_1_Enable, %function
 335              	ADC_SAR_Seq_1_Enable:
 336              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 12


 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 337              		.loc 1 296 0
 338              		.cfi_startproc
 339 0000 80B5     		push	{r7, lr}
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 7, -8
 342              		.cfi_offset 14, -4
 343 0002 00AF     		add	r7, sp, #0
 344              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 345              		.loc 1 297 0
 346 0004 074B     		ldr	r3, .L19
 347 0006 1B68     		ldr	r3, [r3]
 348 0008 002B     		cmp	r3, #0
 349 000a 09DB     		blt	.L17
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 350              		.loc 1 307 0
 351 000c 054B     		ldr	r3, .L19
 352 000e 054A     		ldr	r2, .L19
 353 0010 1268     		ldr	r2, [r2]
 354 0012 8021     		mov	r1, #128
 355 0014 0906     		lsl	r1, r1, #24
 356 0016 0A43     		orr	r2, r1
 357 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 358              		.loc 1 310 0
 359 001a 0A20     		mov	r0, #10
 360 001c FFF7FEFF 		bl	CyDelayUs
 361              	.L17:
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 362              		.loc 1 312 0
 363 0020 BD46     		mov	sp, r7
 364              		@ sp needed
 365 0022 80BD     		pop	{r7, pc}
 366              	.L20:
 367              		.align	2
 368              	.L19:
 369 0024 00001A40 		.word	1075445760
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 13


 370              		.cfi_endproc
 371              	.LFE2:
 372              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 373              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 374              		.align	2
 375              		.global	ADC_SAR_Seq_1_Stop
 376              		.code	16
 377              		.thumb_func
 378              		.type	ADC_SAR_Seq_1_Stop, %function
 379              	ADC_SAR_Seq_1_Stop:
 380              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 381              		.loc 1 331 0
 382              		.cfi_startproc
 383 0000 80B5     		push	{r7, lr}
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 7, -8
 386              		.cfi_offset 14, -4
 387 0002 00AF     		add	r7, sp, #0
 388              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 389              		.loc 1 332 0
 390 0004 034B     		ldr	r3, .L22
 391 0006 034A     		ldr	r2, .L22
 392 0008 1268     		ldr	r2, [r2]
 393 000a 5200     		lsl	r2, r2, #1
 394 000c 5208     		lsr	r2, r2, #1
 395 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 396              		.loc 1 333 0
 397 0010 BD46     		mov	sp, r7
 398              		@ sp needed
 399 0012 80BD     		pop	{r7, pc}
 400              	.L23:
 401              		.align	2
 402              	.L22:
 403 0014 00001A40 		.word	1075445760
 404              		.cfi_endproc
 405              	.LFE3:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 14


 406              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 407              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 408              		.align	2
 409              		.global	ADC_SAR_Seq_1_StartConvert
 410              		.code	16
 411              		.thumb_func
 412              		.type	ADC_SAR_Seq_1_StartConvert, %function
 413              	ADC_SAR_Seq_1_StartConvert:
 414              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 415              		.loc 1 357 0
 416              		.cfi_startproc
 417 0000 80B5     		push	{r7, lr}
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 423              		.loc 1 359 0
 424 0004 044B     		ldr	r3, .L25
 425 0006 044A     		ldr	r2, .L25
 426 0008 1268     		ldr	r2, [r2]
 427 000a 8021     		mov	r1, #128
 428 000c 4902     		lsl	r1, r1, #9
 429 000e 0A43     		orr	r2, r1
 430 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 431              		.loc 1 364 0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 15


 432 0012 BD46     		mov	sp, r7
 433              		@ sp needed
 434 0014 80BD     		pop	{r7, pc}
 435              	.L26:
 436 0016 C046     		.align	2
 437              	.L25:
 438 0018 04001A40 		.word	1075445764
 439              		.cfi_endproc
 440              	.LFE4:
 441              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 442              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 443              		.align	2
 444              		.global	ADC_SAR_Seq_1_StopConvert
 445              		.code	16
 446              		.thumb_func
 447              		.type	ADC_SAR_Seq_1_StopConvert, %function
 448              	ADC_SAR_Seq_1_StopConvert:
 449              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 450              		.loc 1 382 0
 451              		.cfi_startproc
 452 0000 80B5     		push	{r7, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 458              		.loc 1 384 0
 459 0004 034B     		ldr	r3, .L28
 460 0006 034A     		ldr	r2, .L28
 461 0008 1168     		ldr	r1, [r2]
 462 000a 034A     		ldr	r2, .L28+4
 463 000c 0A40     		and	r2, r1
 464 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 465              		.loc 1 386 0
 466 0010 BD46     		mov	sp, r7
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 16


 467              		@ sp needed
 468 0012 80BD     		pop	{r7, pc}
 469              	.L29:
 470              		.align	2
 471              	.L28:
 472 0014 04001A40 		.word	1075445764
 473 0018 FFFFFEFF 		.word	-65537
 474              		.cfi_endproc
 475              	.LFE5:
 476              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 477              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 478              		.align	2
 479              		.global	ADC_SAR_Seq_1_IsEndConversion
 480              		.code	16
 481              		.thumb_func
 482              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 483              	ADC_SAR_Seq_1_IsEndConversion:
 484              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 485              		.loc 1 416 0
 486              		.cfi_startproc
 487 0000 80B5     		push	{r7, lr}
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 84B0     		sub	sp, sp, #16
 492              		.cfi_def_cfa_offset 24
 493 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 17


 494              		.cfi_def_cfa_register 7
 495 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 496              		.loc 1 417 0
 497 0008 0023     		mov	r3, #0
 498 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 499              		.loc 1 419 0
 500 000c 7A68     		ldr	r2, [r7, #4]
 501 000e 0323     		mov	r3, #3
 502 0010 1340     		and	r3, r2
 503 0012 11D0     		beq	.L31
 504              	.L33:
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 505              		.loc 1 423 0 discriminator 1
 506 0014 0B4B     		ldr	r3, .L35
 507 0016 1A68     		ldr	r2, [r3]
 508 0018 0123     		mov	r3, #1
 509 001a 1340     		and	r3, r2
 510 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 511              		.loc 1 424 0 discriminator 1
 512 001e FB68     		ldr	r3, [r7, #12]
 513 0020 002B     		cmp	r3, #0
 514 0022 03D1     		bne	.L32
 515 0024 7A68     		ldr	r2, [r7, #4]
 516 0026 0223     		mov	r3, #2
 517 0028 1340     		and	r3, r2
 518 002a F3D1     		bne	.L33
 519              	.L32:
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 520              		.loc 1 426 0
 521 002c FB68     		ldr	r3, [r7, #12]
 522 002e 002B     		cmp	r3, #0
 523 0030 02D0     		beq	.L31
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 524              		.loc 1 429 0
 525 0032 044B     		ldr	r3, .L35
 526 0034 0122     		mov	r2, #1
 527 0036 1A60     		str	r2, [r3]
 528              	.L31:
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 18


 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 529              		.loc 1 450 0
 530 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 531              		.loc 1 451 0
 532 003a 181C     		mov	r0, r3
 533 003c BD46     		mov	sp, r7
 534 003e 04B0     		add	sp, sp, #16
 535              		@ sp needed
 536 0040 80BD     		pop	{r7, pc}
 537              	.L36:
 538 0042 C046     		.align	2
 539              	.L35:
 540 0044 10021A40 		.word	1075446288
 541              		.cfi_endproc
 542              	.LFE6:
 543              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 544              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 545              		.align	2
 546              		.global	ADC_SAR_Seq_1_GetResult16
 547              		.code	16
 548              		.thumb_func
 549              		.type	ADC_SAR_Seq_1_GetResult16, %function
 550              	ADC_SAR_Seq_1_GetResult16:
 551              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 552              		.loc 1 470 0
 553              		.cfi_startproc
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 19


 554 0000 80B5     		push	{r7, lr}
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 0002 84B0     		sub	sp, sp, #16
 559              		.cfi_def_cfa_offset 24
 560 0004 00AF     		add	r7, sp, #0
 561              		.cfi_def_cfa_register 7
 562 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 563              		.loc 1 474 0
 564 0008 7B68     		ldr	r3, [r7, #4]
 565 000a 002B     		cmp	r3, #0
 566 000c 02D0     		beq	.L38
 567              		.loc 1 474 0 is_stmt 0 discriminator 1
 568 000e 0020     		mov	r0, #0
 569 0010 FFF7FEFF 		bl	CyHalt
 570              	.L38:
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 571              		.loc 1 476 0 is_stmt 1
 572 0014 7B68     		ldr	r3, [r7, #4]
 573 0016 002B     		cmp	r3, #0
 574 0018 08D1     		bne	.L39
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 575              		.loc 1 478 0
 576 001a 7B68     		ldr	r3, [r7, #4]
 577 001c 9B00     		lsl	r3, r3, #2
 578 001e 084A     		ldr	r2, .L42
 579 0020 9B18     		add	r3, r3, r2
 580 0022 1B68     		ldr	r3, [r3]
 581 0024 1B04     		lsl	r3, r3, #16
 582 0026 1B0C     		lsr	r3, r3, #16
 583 0028 FB60     		str	r3, [r7, #12]
 584 002a 01E0     		b	.L40
 585              	.L39:
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 586              		.loc 1 486 0
 587 002c 0023     		mov	r3, #0
 588 002e FB60     		str	r3, [r7, #12]
 589              	.L40:
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 590              		.loc 1 490 0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 20


 591 0030 FB68     		ldr	r3, [r7, #12]
 592 0032 9BB2     		uxth	r3, r3
 593 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 594              		.loc 1 491 0
 595 0036 181C     		mov	r0, r3
 596 0038 BD46     		mov	sp, r7
 597 003a 04B0     		add	sp, sp, #16
 598              		@ sp needed
 599 003c 80BD     		pop	{r7, pc}
 600              	.L43:
 601 003e C046     		.align	2
 602              	.L42:
 603 0040 80011A40 		.word	1075446144
 604              		.cfi_endproc
 605              	.LFE7:
 606              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 607              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 608              		.align	2
 609              		.global	ADC_SAR_Seq_1_SetChanMask
 610              		.code	16
 611              		.thumb_func
 612              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 613              	ADC_SAR_Seq_1_SetChanMask:
 614              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 615              		.loc 1 515 0
 616              		.cfi_startproc
 617 0000 80B5     		push	{r7, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0002 82B0     		sub	sp, sp, #8
 622              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 21


 623 0004 00AF     		add	r7, sp, #0
 624              		.cfi_def_cfa_register 7
 625 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 626              		.loc 1 516 0
 627 0008 034B     		ldr	r3, .L45
 628 000a 7968     		ldr	r1, [r7, #4]
 629 000c 0122     		mov	r2, #1
 630 000e 0A40     		and	r2, r1
 631 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 632              		.loc 1 517 0
 633 0012 BD46     		mov	sp, r7
 634 0014 02B0     		add	sp, sp, #8
 635              		@ sp needed
 636 0016 80BD     		pop	{r7, pc}
 637              	.L46:
 638              		.align	2
 639              	.L45:
 640 0018 20001A40 		.word	1075445792
 641              		.cfi_endproc
 642              	.LFE8:
 643              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 644              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 645              		.align	2
 646              		.global	ADC_SAR_Seq_1_SetLowLimit
 647              		.code	16
 648              		.thumb_func
 649              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 650              	ADC_SAR_Seq_1_SetLowLimit:
 651              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 22


 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 652              		.loc 1 559 0
 653              		.cfi_startproc
 654 0000 80B5     		push	{r7, lr}
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658 0002 82B0     		sub	sp, sp, #8
 659              		.cfi_def_cfa_offset 16
 660 0004 00AF     		add	r7, sp, #0
 661              		.cfi_def_cfa_register 7
 662 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 663              		.loc 1 560 0
 664 0008 084B     		ldr	r3, .L48
 665 000a 084A     		ldr	r2, .L48
 666 000c 1268     		ldr	r2, [r2]
 667 000e 120C     		lsr	r2, r2, #16
 668 0010 1204     		lsl	r2, r2, #16
 669 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 670              		.loc 1 561 0
 671 0014 054B     		ldr	r3, .L48
 672 0016 054A     		ldr	r2, .L48
 673 0018 1168     		ldr	r1, [r2]
 674 001a 7A68     		ldr	r2, [r7, #4]
 675 001c 1204     		lsl	r2, r2, #16
 676 001e 120C     		lsr	r2, r2, #16
 677 0020 0A43     		orr	r2, r1
 678 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 679              		.loc 1 562 0
 680 0024 BD46     		mov	sp, r7
 681 0026 02B0     		add	sp, sp, #8
 682              		@ sp needed
 683 0028 80BD     		pop	{r7, pc}
 684              	.L49:
 685 002a C046     		.align	2
 686              	.L48:
 687 002c 18001A40 		.word	1075445784
 688              		.cfi_endproc
 689              	.LFE9:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 23


 690              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 691              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 692              		.align	2
 693              		.global	ADC_SAR_Seq_1_SetHighLimit
 694              		.code	16
 695              		.thumb_func
 696              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 697              	ADC_SAR_Seq_1_SetHighLimit:
 698              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 699              		.loc 1 580 0
 700              		.cfi_startproc
 701 0000 80B5     		push	{r7, lr}
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0002 82B0     		sub	sp, sp, #8
 706              		.cfi_def_cfa_offset 16
 707 0004 00AF     		add	r7, sp, #0
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 710              		.loc 1 581 0
 711 0008 074B     		ldr	r3, .L51
 712 000a 074A     		ldr	r2, .L51
 713 000c 1268     		ldr	r2, [r2]
 714 000e 1204     		lsl	r2, r2, #16
 715 0010 120C     		lsr	r2, r2, #16
 716 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 717              		.loc 1 582 0
 718 0014 044B     		ldr	r3, .L51
 719 0016 044A     		ldr	r2, .L51
 720 0018 1168     		ldr	r1, [r2]
 721 001a 7A68     		ldr	r2, [r7, #4]
 722 001c 1204     		lsl	r2, r2, #16
 723 001e 0A43     		orr	r2, r1
 724 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 725              		.loc 1 583 0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 24


 726 0022 BD46     		mov	sp, r7
 727 0024 02B0     		add	sp, sp, #8
 728              		@ sp needed
 729 0026 80BD     		pop	{r7, pc}
 730              	.L52:
 731              		.align	2
 732              	.L51:
 733 0028 18001A40 		.word	1075445784
 734              		.cfi_endproc
 735              	.LFE10:
 736              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 737              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 738              		.align	2
 739              		.global	ADC_SAR_Seq_1_SetLimitMask
 740              		.code	16
 741              		.thumb_func
 742              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 743              	ADC_SAR_Seq_1_SetLimitMask:
 744              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 745              		.loc 1 604 0
 746              		.cfi_startproc
 747 0000 80B5     		push	{r7, lr}
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 7, -8
 750              		.cfi_offset 14, -4
 751 0002 82B0     		sub	sp, sp, #8
 752              		.cfi_def_cfa_offset 16
 753 0004 00AF     		add	r7, sp, #0
 754              		.cfi_def_cfa_register 7
 755 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 756              		.loc 1 605 0
 757 0008 034B     		ldr	r3, .L54
 758 000a 7968     		ldr	r1, [r7, #4]
 759 000c 0122     		mov	r2, #1
 760 000e 0A40     		and	r2, r1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 25


 761 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 762              		.loc 1 606 0
 763 0012 BD46     		mov	sp, r7
 764 0014 02B0     		add	sp, sp, #8
 765              		@ sp needed
 766 0016 80BD     		pop	{r7, pc}
 767              	.L55:
 768              		.align	2
 769              	.L54:
 770 0018 38021A40 		.word	1075446328
 771              		.cfi_endproc
 772              	.LFE11:
 773              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 774              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 775              		.align	2
 776              		.global	ADC_SAR_Seq_1_SetSatMask
 777              		.code	16
 778              		.thumb_func
 779              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 780              	ADC_SAR_Seq_1_SetSatMask:
 781              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 782              		.loc 1 627 0
 783              		.cfi_startproc
 784 0000 80B5     		push	{r7, lr}
 785              		.cfi_def_cfa_offset 8
 786              		.cfi_offset 7, -8
 787              		.cfi_offset 14, -4
 788 0002 82B0     		sub	sp, sp, #8
 789              		.cfi_def_cfa_offset 16
 790 0004 00AF     		add	r7, sp, #0
 791              		.cfi_def_cfa_register 7
 792 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 793              		.loc 1 628 0
 794 0008 034B     		ldr	r3, .L57
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 26


 795 000a 7968     		ldr	r1, [r7, #4]
 796 000c 0122     		mov	r2, #1
 797 000e 0A40     		and	r2, r1
 798 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 799              		.loc 1 629 0
 800 0012 BD46     		mov	sp, r7
 801 0014 02B0     		add	sp, sp, #8
 802              		@ sp needed
 803 0016 80BD     		pop	{r7, pc}
 804              	.L58:
 805              		.align	2
 806              	.L57:
 807 0018 28021A40 		.word	1075446312
 808              		.cfi_endproc
 809              	.LFE12:
 810              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 811              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 812              		.align	2
 813              		.global	ADC_SAR_Seq_1_SetOffset
 814              		.code	16
 815              		.thumb_func
 816              		.type	ADC_SAR_Seq_1_SetOffset, %function
 817              	ADC_SAR_Seq_1_SetOffset:
 818              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 819              		.loc 1 655 0
 820              		.cfi_startproc
 821 0000 80B5     		push	{r7, lr}
 822              		.cfi_def_cfa_offset 8
 823              		.cfi_offset 7, -8
 824              		.cfi_offset 14, -4
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 27


 825 0002 82B0     		sub	sp, sp, #8
 826              		.cfi_def_cfa_offset 16
 827 0004 00AF     		add	r7, sp, #0
 828              		.cfi_def_cfa_register 7
 829 0006 7860     		str	r0, [r7, #4]
 830 0008 0A1C     		mov	r2, r1
 831 000a BB1C     		add	r3, r7, #2
 832 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 833              		.loc 1 657 0
 834 000e 7B68     		ldr	r3, [r7, #4]
 835 0010 002B     		cmp	r3, #0
 836 0012 02D0     		beq	.L60
 837              		.loc 1 657 0 is_stmt 0 discriminator 1
 838 0014 0020     		mov	r0, #0
 839 0016 FFF7FEFF 		bl	CyHalt
 840              	.L60:
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 841              		.loc 1 659 0 is_stmt 1
 842 001a 044B     		ldr	r3, .L61
 843 001c 7A68     		ldr	r2, [r7, #4]
 844 001e 5200     		lsl	r2, r2, #1
 845 0020 B91C     		add	r1, r7, #2
 846 0022 0988     		ldrh	r1, [r1]
 847 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 848              		.loc 1 660 0
 849 0026 BD46     		mov	sp, r7
 850 0028 02B0     		add	sp, sp, #8
 851              		@ sp needed
 852 002a 80BD     		pop	{r7, pc}
 853              	.L62:
 854              		.align	2
 855              	.L61:
 856 002c 00000000 		.word	ADC_SAR_Seq_1_offset
 857              		.cfi_endproc
 858              	.LFE13:
 859              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 860              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 861              		.align	2
 862              		.global	ADC_SAR_Seq_1_SetGain
 863              		.code	16
 864              		.thumb_func
 865              		.type	ADC_SAR_Seq_1_SetGain, %function
 866              	ADC_SAR_Seq_1_SetGain:
 867              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 28


 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 868              		.loc 1 689 0
 869              		.cfi_startproc
 870 0000 80B5     		push	{r7, lr}
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 7, -8
 873              		.cfi_offset 14, -4
 874 0002 82B0     		sub	sp, sp, #8
 875              		.cfi_def_cfa_offset 16
 876 0004 00AF     		add	r7, sp, #0
 877              		.cfi_def_cfa_register 7
 878 0006 7860     		str	r0, [r7, #4]
 879 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 880              		.loc 1 691 0
 881 000a 7B68     		ldr	r3, [r7, #4]
 882 000c 002B     		cmp	r3, #0
 883 000e 02D0     		beq	.L64
 884              		.loc 1 691 0 is_stmt 0 discriminator 1
 885 0010 0020     		mov	r0, #0
 886 0012 FFF7FEFF 		bl	CyHalt
 887              	.L64:
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 888              		.loc 1 693 0 is_stmt 1
 889 0016 044B     		ldr	r3, .L65
 890 0018 7A68     		ldr	r2, [r7, #4]
 891 001a 9200     		lsl	r2, r2, #2
 892 001c 3968     		ldr	r1, [r7]
 893 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 894              		.loc 1 694 0
 895 0020 BD46     		mov	sp, r7
 896 0022 02B0     		add	sp, sp, #8
 897              		@ sp needed
 898 0024 80BD     		pop	{r7, pc}
 899              	.L66:
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 29


 900 0026 C046     		.align	2
 901              	.L65:
 902 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 903              		.cfi_endproc
 904              	.LFE14:
 905              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 906              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 907              		.align	2
 908              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 909              		.code	16
 910              		.thumb_func
 911              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 912              	ADC_SAR_Seq_1_CountsTo_mVolts:
 913              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 914              		.loc 1 722 0
 915              		.cfi_startproc
 916 0000 80B5     		push	{r7, lr}
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 0002 84B0     		sub	sp, sp, #16
 921              		.cfi_def_cfa_offset 24
 922 0004 00AF     		add	r7, sp, #0
 923              		.cfi_def_cfa_register 7
 924 0006 7860     		str	r0, [r7, #4]
 925 0008 0A1C     		mov	r2, r1
 926 000a BB1C     		add	r3, r7, #2
 927 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 30


 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 928              		.loc 1 726 0
 929 000e 7B68     		ldr	r3, [r7, #4]
 930 0010 002B     		cmp	r3, #0
 931 0012 02D0     		beq	.L68
 932              		.loc 1 726 0 is_stmt 0 discriminator 1
 933 0014 0020     		mov	r0, #0
 934 0016 FFF7FEFF 		bl	CyHalt
 935              	.L68:
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 936              		.loc 1 737 0 is_stmt 1
 937 001a BB1C     		add	r3, r7, #2
 938 001c 1A88     		ldrh	r2, [r3]
 939 001e 1E4B     		ldr	r3, .L74
 940 0020 7968     		ldr	r1, [r7, #4]
 941 0022 4900     		lsl	r1, r1, #1
 942 0024 CB5A     		ldrh	r3, [r1, r3]
 943 0026 9BB2     		uxth	r3, r3
 944 0028 9BB2     		uxth	r3, r3
 945 002a D31A     		sub	r3, r2, r3
 946 002c 9AB2     		uxth	r2, r3
 947 002e BB1C     		add	r3, r7, #2
 948 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 949              		.loc 1 739 0
 950 0032 BB1C     		add	r3, r7, #2
 951 0034 0021     		mov	r1, #0
 952 0036 5B5E     		ldrsh	r3, [r3, r1]
 953 0038 184A     		ldr	r2, .L74+4
 954 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 955              		.loc 1 740 0
 956 003c BB1C     		add	r3, r7, #2
 957 003e 0021     		mov	r1, #0
 958 0040 5B5E     		ldrsh	r3, [r3, r1]
 959 0042 002B     		cmp	r3, #0
 960 0044 08DD     		ble	.L69
 961              		.loc 1 740 0 is_stmt 0 discriminator 1
 962 0046 164B     		ldr	r3, .L74+8
 963 0048 7968     		ldr	r1, [r7, #4]
 964 004a 8900     		lsl	r1, r1, #2
 965 004c CB58     		ldr	r3, [r1, r3]
 966 004e 002B     		cmp	r3, #0
 967 0050 00DA     		bge	.L70
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 31


 968 0052 0133     		add	r3, r3, #1
 969              	.L70:
 970 0054 5B10     		asr	r3, r3, #1
 971 0056 08E0     		b	.L71
 972              	.L69:
 973              		.loc 1 740 0 discriminator 2
 974 0058 114B     		ldr	r3, .L74+8
 975 005a 7968     		ldr	r1, [r7, #4]
 976 005c 8900     		lsl	r1, r1, #2
 977 005e CB58     		ldr	r3, [r1, r3]
 978 0060 002B     		cmp	r3, #0
 979 0062 00DA     		bge	.L72
 980 0064 0133     		add	r3, r3, #1
 981              	.L72:
 982 0066 5B10     		asr	r3, r3, #1
 983 0068 5B42     		neg	r3, r3
 984              	.L71:
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 985              		.loc 1 739 0 is_stmt 1
 986 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 987              		.loc 1 741 0
 988 006c 0C4B     		ldr	r3, .L74+8
 989 006e 7968     		ldr	r1, [r7, #4]
 990 0070 8900     		lsl	r1, r1, #2
 991 0072 CB58     		ldr	r3, [r1, r3]
 992 0074 101C     		mov	r0, r2
 993 0076 191C     		mov	r1, r3
 994 0078 FFF7FEFF 		bl	__aeabi_idiv
 995 007c 031C     		mov	r3, r0
 996 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 997              		.loc 1 739 0
 998 0080 3B1C     		mov	r3, r7
 999 0082 0E33     		add	r3, r3, #14
 1000 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1001              		.loc 1 743 0
 1002 0086 3B1C     		mov	r3, r7
 1003 0088 0E33     		add	r3, r3, #14
 1004 008a 1B88     		ldrh	r3, [r3]
 1005 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1006              		.loc 1 744 0
 1007 008e 181C     		mov	r0, r3
 1008 0090 BD46     		mov	sp, r7
 1009 0092 04B0     		add	sp, sp, #16
 1010              		@ sp needed
 1011 0094 80BD     		pop	{r7, pc}
 1012              	.L75:
 1013 0096 C046     		.align	2
 1014              	.L74:
 1015 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1016 009c 10270000 		.word	10000
 1017 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1018              		.cfi_endproc
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 32


 1019              	.LFE15:
 1020              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1021              		.global	__aeabi_lmul
 1022              		.global	__aeabi_ldivmod
 1023              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1024              		.align	2
 1025              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1026              		.code	16
 1027              		.thumb_func
 1028              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1029              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1030              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1031              		.loc 1 776 0
 1032              		.cfi_startproc
 1033 0000 B0B5     		push	{r4, r5, r7, lr}
 1034              		.cfi_def_cfa_offset 16
 1035              		.cfi_offset 4, -16
 1036              		.cfi_offset 5, -12
 1037              		.cfi_offset 7, -8
 1038              		.cfi_offset 14, -4
 1039 0002 86B0     		sub	sp, sp, #24
 1040              		.cfi_def_cfa_offset 40
 1041 0004 00AF     		add	r7, sp, #0
 1042              		.cfi_def_cfa_register 7
 1043 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 33


 1044 0008 0A1C     		mov	r2, r1
 1045 000a 3B1C     		mov	r3, r7
 1046 000c 0A33     		add	r3, r3, #10
 1047 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1048              		.loc 1 780 0
 1049 0010 FB68     		ldr	r3, [r7, #12]
 1050 0012 002B     		cmp	r3, #0
 1051 0014 02D0     		beq	.L77
 1052              		.loc 1 780 0 is_stmt 0 discriminator 1
 1053 0016 0020     		mov	r0, #0
 1054 0018 FFF7FEFF 		bl	CyHalt
 1055              	.L77:
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1056              		.loc 1 791 0 is_stmt 1
 1057 001c 3B1C     		mov	r3, r7
 1058 001e 0A33     		add	r3, r3, #10
 1059 0020 1A88     		ldrh	r2, [r3]
 1060 0022 1B4B     		ldr	r3, .L79+8
 1061 0024 F968     		ldr	r1, [r7, #12]
 1062 0026 4900     		lsl	r1, r1, #1
 1063 0028 CB5A     		ldrh	r3, [r1, r3]
 1064 002a 9BB2     		uxth	r3, r3
 1065 002c 9BB2     		uxth	r3, r3
 1066 002e D31A     		sub	r3, r2, r3
 1067 0030 9AB2     		uxth	r2, r3
 1068 0032 3B1C     		mov	r3, r7
 1069 0034 0A33     		add	r3, r3, #10
 1070 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1071              		.loc 1 793 0
 1072 0038 3B1C     		mov	r3, r7
 1073 003a 0A33     		add	r3, r3, #10
 1074 003c 1B88     		ldrh	r3, [r3]
 1075 003e 1BB2     		sxth	r3, r3
 1076 0040 3B60     		str	r3, [r7]
 1077 0042 DB17     		asr	r3, r3, #31
 1078 0044 7B60     		str	r3, [r7, #4]
 1079 0046 3868     		ldr	r0, [r7]
 1080 0048 7968     		ldr	r1, [r7, #4]
 1081 004a 104B     		ldr	r3, .L79+4
 1082 004c 0E4A     		ldr	r2, .L79
 1083 004e FFF7FEFF 		bl	__aeabi_lmul
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 34


 1084 0052 021C     		mov	r2, r0
 1085 0054 0B1C     		mov	r3, r1
 1086 0056 0F49     		ldr	r1, .L79+12
 1087 0058 F868     		ldr	r0, [r7, #12]
 1088 005a 8000     		lsl	r0, r0, #2
 1089 005c 4158     		ldr	r1, [r0, r1]
 1090 005e 0C1C     		mov	r4, r1
 1091 0060 C917     		asr	r1, r1, #31
 1092 0062 0D1C     		mov	r5, r1
 1093 0064 101C     		mov	r0, r2
 1094 0066 191C     		mov	r1, r3
 1095 0068 221C     		mov	r2, r4
 1096 006a 2B1C     		mov	r3, r5
 1097 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1098 0070 031C     		mov	r3, r0
 1099 0072 0C1C     		mov	r4, r1
 1100 0074 3B61     		str	r3, [r7, #16]
 1101 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1102              		.loc 1 795 0
 1103 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1104              		.loc 1 796 0
 1105 007a 181C     		mov	r0, r3
 1106 007c BD46     		mov	sp, r7
 1107 007e 06B0     		add	sp, sp, #24
 1108              		@ sp needed
 1109 0080 B0BD     		pop	{r4, r5, r7, pc}
 1110              	.L80:
 1111 0082 C046C046 		.align	3
 1111      C046
 1112              	.L79:
 1113 0088 80969800 		.word	10000000
 1114 008c 00000000 		.word	0
 1115 0090 00000000 		.word	ADC_SAR_Seq_1_offset
 1116 0094 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1117              		.cfi_endproc
 1118              	.LFE16:
 1119              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1120              		.global	__aeabi_i2f
 1121              		.global	__aeabi_fmul
 1122              		.global	__aeabi_fdiv
 1123              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1124              		.align	2
 1125              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1126              		.code	16
 1127              		.thumb_func
 1128              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1129              	ADC_SAR_Seq_1_CountsTo_Volts:
 1130              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 35


 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1131              		.loc 1 821 0
 1132              		.cfi_startproc
 1133 0000 90B5     		push	{r4, r7, lr}
 1134              		.cfi_def_cfa_offset 12
 1135              		.cfi_offset 4, -12
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 85B0     		sub	sp, sp, #20
 1139              		.cfi_def_cfa_offset 32
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 7860     		str	r0, [r7, #4]
 1143 0008 0A1C     		mov	r2, r1
 1144 000a BB1C     		add	r3, r7, #2
 1145 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1146              		.loc 1 825 0
 1147 000e 7B68     		ldr	r3, [r7, #4]
 1148 0010 002B     		cmp	r3, #0
 1149 0012 02D0     		beq	.L82
 1150              		.loc 1 825 0 is_stmt 0 discriminator 1
 1151 0014 0020     		mov	r0, #0
 1152 0016 FFF7FEFF 		bl	CyHalt
 1153              	.L82:
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 36


 1154              		.loc 1 836 0 is_stmt 1
 1155 001a BB1C     		add	r3, r7, #2
 1156 001c 1A88     		ldrh	r2, [r3]
 1157 001e 154B     		ldr	r3, .L84
 1158 0020 7968     		ldr	r1, [r7, #4]
 1159 0022 4900     		lsl	r1, r1, #1
 1160 0024 CB5A     		ldrh	r3, [r1, r3]
 1161 0026 9BB2     		uxth	r3, r3
 1162 0028 9BB2     		uxth	r3, r3
 1163 002a D31A     		sub	r3, r2, r3
 1164 002c 9AB2     		uxth	r2, r3
 1165 002e BB1C     		add	r3, r7, #2
 1166 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1167              		.loc 1 838 0
 1168 0032 BB1C     		add	r3, r7, #2
 1169 0034 0022     		mov	r2, #0
 1170 0036 9B5E     		ldrsh	r3, [r3, r2]
 1171 0038 181C     		mov	r0, r3
 1172 003a FFF7FEFF 		bl	__aeabi_i2f
 1173 003e 031C     		add	r3, r0, #0
 1174 0040 181C     		add	r0, r3, #0
 1175 0042 0D49     		ldr	r1, .L84+4
 1176 0044 FFF7FEFF 		bl	__aeabi_fmul
 1177 0048 031C     		add	r3, r0, #0
 1178 004a 1C1C     		add	r4, r3, #0
 1179 004c 0B4B     		ldr	r3, .L84+8
 1180 004e 7A68     		ldr	r2, [r7, #4]
 1181 0050 9200     		lsl	r2, r2, #2
 1182 0052 D358     		ldr	r3, [r2, r3]
 1183 0054 181C     		mov	r0, r3
 1184 0056 FFF7FEFF 		bl	__aeabi_i2f
 1185 005a 031C     		add	r3, r0, #0
 1186 005c 201C     		add	r0, r4, #0
 1187 005e 191C     		add	r1, r3, #0
 1188 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1189 0064 031C     		add	r3, r0, #0
 1190 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1191              		.loc 1 840 0
 1192 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1193              		.loc 1 841 0
 1194 006a 181C     		add	r0, r3, #0
 1195 006c BD46     		mov	sp, r7
 1196 006e 05B0     		add	sp, sp, #20
 1197              		@ sp needed
 1198 0070 90BD     		pop	{r4, r7, pc}
 1199              	.L85:
 1200 0072 C046     		.align	2
 1201              	.L84:
 1202 0074 00000000 		.word	ADC_SAR_Seq_1_offset
 1203 0078 00002041 		.word	1092616192
 1204 007c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1205              		.cfi_endproc
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 37


 1206              	.LFE17:
 1207              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1208              		.text
 1209              	.Letext0:
 1210              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1211              		.section	.debug_info,"",%progbits
 1212              	.Ldebug_info0:
 1213 0000 70040000 		.4byte	0x470
 1214 0004 0400     		.2byte	0x4
 1215 0006 00000000 		.4byte	.Ldebug_abbrev0
 1216 000a 04       		.byte	0x4
 1217 000b 01       		.uleb128 0x1
 1218 000c 06010000 		.4byte	.LASF59
 1219 0010 01       		.byte	0x1
 1220 0011 20000000 		.4byte	.LASF60
 1221 0015 82010000 		.4byte	.LASF61
 1222 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1223 001d 00000000 		.4byte	0
 1224 0021 00000000 		.4byte	.Ldebug_line0
 1225 0025 02       		.uleb128 0x2
 1226 0026 01       		.byte	0x1
 1227 0027 06       		.byte	0x6
 1228 0028 09040000 		.4byte	.LASF0
 1229 002c 02       		.uleb128 0x2
 1230 002d 01       		.byte	0x1
 1231 002e 08       		.byte	0x8
 1232 002f C9010000 		.4byte	.LASF1
 1233 0033 02       		.uleb128 0x2
 1234 0034 02       		.byte	0x2
 1235 0035 05       		.byte	0x5
 1236 0036 B7030000 		.4byte	.LASF2
 1237 003a 02       		.uleb128 0x2
 1238 003b 02       		.byte	0x2
 1239 003c 07       		.byte	0x7
 1240 003d 15040000 		.4byte	.LASF3
 1241 0041 02       		.uleb128 0x2
 1242 0042 04       		.byte	0x4
 1243 0043 05       		.byte	0x5
 1244 0044 E2030000 		.4byte	.LASF4
 1245 0048 02       		.uleb128 0x2
 1246 0049 04       		.byte	0x4
 1247 004a 07       		.byte	0x7
 1248 004b 0B020000 		.4byte	.LASF5
 1249 004f 02       		.uleb128 0x2
 1250 0050 08       		.byte	0x8
 1251 0051 05       		.byte	0x5
 1252 0052 78030000 		.4byte	.LASF6
 1253 0056 02       		.uleb128 0x2
 1254 0057 08       		.byte	0x8
 1255 0058 07       		.byte	0x7
 1256 0059 14030000 		.4byte	.LASF7
 1257 005d 03       		.uleb128 0x3
 1258 005e 04       		.byte	0x4
 1259 005f 05       		.byte	0x5
 1260 0060 696E7400 		.ascii	"int\000"
 1261 0064 02       		.uleb128 0x2
 1262 0065 04       		.byte	0x4
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 38


 1263 0066 07       		.byte	0x7
 1264 0067 E5020000 		.4byte	.LASF8
 1265 006b 04       		.uleb128 0x4
 1266 006c C1030000 		.4byte	.LASF9
 1267 0070 02       		.byte	0x2
 1268 0071 A1       		.byte	0xa1
 1269 0072 2C000000 		.4byte	0x2c
 1270 0076 04       		.uleb128 0x4
 1271 0077 B4020000 		.4byte	.LASF10
 1272 007b 02       		.byte	0x2
 1273 007c A2       		.byte	0xa2
 1274 007d 3A000000 		.4byte	0x3a
 1275 0081 04       		.uleb128 0x4
 1276 0082 C5020000 		.4byte	.LASF11
 1277 0086 02       		.byte	0x2
 1278 0087 A3       		.byte	0xa3
 1279 0088 48000000 		.4byte	0x48
 1280 008c 04       		.uleb128 0x4
 1281 008d 05020000 		.4byte	.LASF12
 1282 0091 02       		.byte	0x2
 1283 0092 A5       		.byte	0xa5
 1284 0093 33000000 		.4byte	0x33
 1285 0097 04       		.uleb128 0x4
 1286 0098 1D020000 		.4byte	.LASF13
 1287 009c 02       		.byte	0x2
 1288 009d A6       		.byte	0xa6
 1289 009e 41000000 		.4byte	0x41
 1290 00a2 04       		.uleb128 0x4
 1291 00a3 F4000000 		.4byte	.LASF14
 1292 00a7 02       		.byte	0x2
 1293 00a8 A7       		.byte	0xa7
 1294 00a9 AD000000 		.4byte	0xad
 1295 00ad 02       		.uleb128 0x2
 1296 00ae 04       		.byte	0x4
 1297 00af 04       		.byte	0x4
 1298 00b0 65000000 		.4byte	.LASF15
 1299 00b4 02       		.uleb128 0x2
 1300 00b5 08       		.byte	0x8
 1301 00b6 04       		.byte	0x4
 1302 00b7 69020000 		.4byte	.LASF16
 1303 00bb 04       		.uleb128 0x4
 1304 00bc 2F040000 		.4byte	.LASF17
 1305 00c0 02       		.byte	0x2
 1306 00c1 AC       		.byte	0xac
 1307 00c2 4F000000 		.4byte	0x4f
 1308 00c6 02       		.uleb128 0x2
 1309 00c7 01       		.byte	0x1
 1310 00c8 08       		.byte	0x8
 1311 00c9 CA000000 		.4byte	.LASF18
 1312 00cd 05       		.uleb128 0x5
 1313 00ce 1A000000 		.4byte	.LASF19
 1314 00d2 02       		.byte	0x2
 1315 00d3 4D01     		.2byte	0x14d
 1316 00d5 D9000000 		.4byte	0xd9
 1317 00d9 06       		.uleb128 0x6
 1318 00da 81000000 		.4byte	0x81
 1319 00de 02       		.uleb128 0x2
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 39


 1320 00df 04       		.byte	0x4
 1321 00e0 07       		.byte	0x7
 1322 00e1 6F030000 		.4byte	.LASF20
 1323 00e5 07       		.uleb128 0x7
 1324 00e6 55020000 		.4byte	.LASF24
 1325 00ea 01       		.byte	0x1
 1326 00eb 3F       		.byte	0x3f
 1327 00ec 00000000 		.4byte	.LFB0
 1328 00f0 24000000 		.4byte	.LFE0-.LFB0
 1329 00f4 01       		.uleb128 0x1
 1330 00f5 9C       		.byte	0x9c
 1331 00f6 08       		.uleb128 0x8
 1332 00f7 35040000 		.4byte	.LASF35
 1333 00fb 01       		.byte	0x1
 1334 00fc 5E       		.byte	0x5e
 1335 00fd 00000000 		.4byte	.LFB1
 1336 0101 AC010000 		.4byte	.LFE1-.LFB1
 1337 0105 01       		.uleb128 0x1
 1338 0106 9C       		.byte	0x9c
 1339 0107 36010000 		.4byte	0x136
 1340 010b 09       		.uleb128 0x9
 1341 010c 8B030000 		.4byte	.LASF21
 1342 0110 01       		.byte	0x1
 1343 0111 60       		.byte	0x60
 1344 0112 81000000 		.4byte	0x81
 1345 0116 02       		.uleb128 0x2
 1346 0117 91       		.byte	0x91
 1347 0118 6C       		.sleb128 -20
 1348 0119 09       		.uleb128 0x9
 1349 011a FC000000 		.4byte	.LASF22
 1350 011e 01       		.byte	0x1
 1351 011f 61       		.byte	0x61
 1352 0120 81000000 		.4byte	0x81
 1353 0124 02       		.uleb128 0x2
 1354 0125 91       		.byte	0x91
 1355 0126 64       		.sleb128 -28
 1356 0127 09       		.uleb128 0x9
 1357 0128 0D030000 		.4byte	.LASF23
 1358 012c 01       		.byte	0x1
 1359 012d 62       		.byte	0x62
 1360 012e 97000000 		.4byte	0x97
 1361 0132 02       		.uleb128 0x2
 1362 0133 91       		.byte	0x91
 1363 0134 68       		.sleb128 -24
 1364 0135 00       		.byte	0
 1365 0136 0A       		.uleb128 0xa
 1366 0137 23020000 		.4byte	.LASF25
 1367 013b 01       		.byte	0x1
 1368 013c 2701     		.2byte	0x127
 1369 013e 00000000 		.4byte	.LFB2
 1370 0142 28000000 		.4byte	.LFE2-.LFB2
 1371 0146 01       		.uleb128 0x1
 1372 0147 9C       		.byte	0x9c
 1373 0148 0B       		.uleb128 0xb
 1374 0149 D7010000 		.4byte	.LASF26
 1375 014d 01       		.byte	0x1
 1376 014e 4A01     		.2byte	0x14a
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 40


 1377 0150 00000000 		.4byte	.LFB3
 1378 0154 18000000 		.4byte	.LFE3-.LFB3
 1379 0158 01       		.uleb128 0x1
 1380 0159 9C       		.byte	0x9c
 1381 015a 0B       		.uleb128 0xb
 1382 015b F2020000 		.4byte	.LASF27
 1383 015f 01       		.byte	0x1
 1384 0160 6401     		.2byte	0x164
 1385 0162 00000000 		.4byte	.LFB4
 1386 0166 1C000000 		.4byte	.LFE4-.LFB4
 1387 016a 01       		.uleb128 0x1
 1388 016b 9C       		.byte	0x9c
 1389 016c 0B       		.uleb128 0xb
 1390 016d 00000000 		.4byte	.LASF28
 1391 0171 01       		.byte	0x1
 1392 0172 7D01     		.2byte	0x17d
 1393 0174 00000000 		.4byte	.LFB5
 1394 0178 1C000000 		.4byte	.LFE5-.LFB5
 1395 017c 01       		.uleb128 0x1
 1396 017d 9C       		.byte	0x9c
 1397 017e 0C       		.uleb128 0xc
 1398 017f EB030000 		.4byte	.LASF30
 1399 0183 01       		.byte	0x1
 1400 0184 9F01     		.2byte	0x19f
 1401 0186 81000000 		.4byte	0x81
 1402 018a 00000000 		.4byte	.LFB6
 1403 018e 48000000 		.4byte	.LFE6-.LFB6
 1404 0192 01       		.uleb128 0x1
 1405 0193 9C       		.byte	0x9c
 1406 0194 B7010000 		.4byte	0x1b7
 1407 0198 0D       		.uleb128 0xd
 1408 0199 AF030000 		.4byte	.LASF32
 1409 019d 01       		.byte	0x1
 1410 019e 9F01     		.2byte	0x19f
 1411 01a0 81000000 		.4byte	0x81
 1412 01a4 02       		.uleb128 0x2
 1413 01a5 91       		.byte	0x91
 1414 01a6 6C       		.sleb128 -20
 1415 01a7 0E       		.uleb128 0xe
 1416 01a8 CF000000 		.4byte	.LASF29
 1417 01ac 01       		.byte	0x1
 1418 01ad A101     		.2byte	0x1a1
 1419 01af 81000000 		.4byte	0x81
 1420 01b3 02       		.uleb128 0x2
 1421 01b4 91       		.byte	0x91
 1422 01b5 74       		.sleb128 -12
 1423 01b6 00       		.byte	0
 1424 01b7 0F       		.uleb128 0xf
 1425 01b8 48040000 		.4byte	.LASF31
 1426 01bc 01       		.byte	0x1
 1427 01bd D501     		.2byte	0x1d5
 1428 01bf 8C000000 		.4byte	0x8c
 1429 01c3 00000000 		.4byte	.LFB7
 1430 01c7 44000000 		.4byte	.LFE7-.LFB7
 1431 01cb 01       		.uleb128 0x1
 1432 01cc 9C       		.byte	0x9c
 1433 01cd F0010000 		.4byte	0x1f0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 41


 1434 01d1 0D       		.uleb128 0xd
 1435 01d2 63030000 		.4byte	.LASF33
 1436 01d6 01       		.byte	0x1
 1437 01d7 D501     		.2byte	0x1d5
 1438 01d9 81000000 		.4byte	0x81
 1439 01dd 02       		.uleb128 0x2
 1440 01de 91       		.byte	0x91
 1441 01df 6C       		.sleb128 -20
 1442 01e0 0E       		.uleb128 0xe
 1443 01e1 28040000 		.4byte	.LASF34
 1444 01e5 01       		.byte	0x1
 1445 01e6 D701     		.2byte	0x1d7
 1446 01e8 81000000 		.4byte	0x81
 1447 01ec 02       		.uleb128 0x2
 1448 01ed 91       		.byte	0x91
 1449 01ee 74       		.sleb128 -12
 1450 01ef 00       		.byte	0
 1451 01f0 10       		.uleb128 0x10
 1452 01f1 43030000 		.4byte	.LASF36
 1453 01f5 01       		.byte	0x1
 1454 01f6 0202     		.2byte	0x202
 1455 01f8 00000000 		.4byte	.LFB8
 1456 01fc 1C000000 		.4byte	.LFE8-.LFB8
 1457 0200 01       		.uleb128 0x1
 1458 0201 9C       		.byte	0x9c
 1459 0202 16020000 		.4byte	0x216
 1460 0206 0D       		.uleb128 0xd
 1461 0207 86030000 		.4byte	.LASF37
 1462 020b 01       		.byte	0x1
 1463 020c 0202     		.2byte	0x202
 1464 020e 81000000 		.4byte	0x81
 1465 0212 02       		.uleb128 0x2
 1466 0213 91       		.byte	0x91
 1467 0214 74       		.sleb128 -12
 1468 0215 00       		.byte	0
 1469 0216 10       		.uleb128 0x10
 1470 0217 75000000 		.4byte	.LASF38
 1471 021b 01       		.byte	0x1
 1472 021c 2E02     		.2byte	0x22e
 1473 021e 00000000 		.4byte	.LFB9
 1474 0222 30000000 		.4byte	.LFE9-.LFB9
 1475 0226 01       		.uleb128 0x1
 1476 0227 9C       		.byte	0x9c
 1477 0228 3C020000 		.4byte	0x23c
 1478 022c 0D       		.uleb128 0xd
 1479 022d A3020000 		.4byte	.LASF39
 1480 0231 01       		.byte	0x1
 1481 0232 2E02     		.2byte	0x22e
 1482 0234 81000000 		.4byte	0x81
 1483 0238 02       		.uleb128 0x2
 1484 0239 91       		.byte	0x91
 1485 023a 74       		.sleb128 -12
 1486 023b 00       		.byte	0
 1487 023c 10       		.uleb128 0x10
 1488 023d EA010000 		.4byte	.LASF40
 1489 0241 01       		.byte	0x1
 1490 0242 4302     		.2byte	0x243
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 42


 1491 0244 00000000 		.4byte	.LFB10
 1492 0248 2C000000 		.4byte	.LFE10-.LFB10
 1493 024c 01       		.uleb128 0x1
 1494 024d 9C       		.byte	0x9c
 1495 024e 62020000 		.4byte	0x262
 1496 0252 0D       		.uleb128 0xd
 1497 0253 6B000000 		.4byte	.LASF41
 1498 0257 01       		.byte	0x1
 1499 0258 4302     		.2byte	0x243
 1500 025a 81000000 		.4byte	0x81
 1501 025e 02       		.uleb128 0x2
 1502 025f 91       		.byte	0x91
 1503 0260 74       		.sleb128 -12
 1504 0261 00       		.byte	0
 1505 0262 10       		.uleb128 0x10
 1506 0263 C7030000 		.4byte	.LASF42
 1507 0267 01       		.byte	0x1
 1508 0268 5B02     		.2byte	0x25b
 1509 026a 00000000 		.4byte	.LFB11
 1510 026e 1C000000 		.4byte	.LFE11-.LFB11
 1511 0272 01       		.uleb128 0x1
 1512 0273 9C       		.byte	0x9c
 1513 0274 88020000 		.4byte	0x288
 1514 0278 0D       		.uleb128 0xd
 1515 0279 86030000 		.4byte	.LASF37
 1516 027d 01       		.byte	0x1
 1517 027e 5B02     		.2byte	0x25b
 1518 0280 81000000 		.4byte	0x81
 1519 0284 02       		.uleb128 0x2
 1520 0285 91       		.byte	0x91
 1521 0286 74       		.sleb128 -12
 1522 0287 00       		.byte	0
 1523 0288 10       		.uleb128 0x10
 1524 0289 CC020000 		.4byte	.LASF43
 1525 028d 01       		.byte	0x1
 1526 028e 7202     		.2byte	0x272
 1527 0290 00000000 		.4byte	.LFB12
 1528 0294 1C000000 		.4byte	.LFE12-.LFB12
 1529 0298 01       		.uleb128 0x1
 1530 0299 9C       		.byte	0x9c
 1531 029a AE020000 		.4byte	0x2ae
 1532 029e 0D       		.uleb128 0xd
 1533 029f 86030000 		.4byte	.LASF37
 1534 02a3 01       		.byte	0x1
 1535 02a4 7202     		.2byte	0x272
 1536 02a6 81000000 		.4byte	0x81
 1537 02aa 02       		.uleb128 0x2
 1538 02ab 91       		.byte	0x91
 1539 02ac 74       		.sleb128 -12
 1540 02ad 00       		.byte	0
 1541 02ae 11       		.uleb128 0x11
 1542 02af 2B030000 		.4byte	.LASF44
 1543 02b3 01       		.byte	0x1
 1544 02b4 8E02     		.2byte	0x28e
 1545 02b6 00000000 		.4byte	.LFB13
 1546 02ba 30000000 		.4byte	.LFE13-.LFB13
 1547 02be 01       		.uleb128 0x1
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 43


 1548 02bf 9C       		.byte	0x9c
 1549 02c0 E3020000 		.4byte	0x2e3
 1550 02c4 0D       		.uleb128 0xd
 1551 02c5 63030000 		.4byte	.LASF33
 1552 02c9 01       		.byte	0x1
 1553 02ca 8E02     		.2byte	0x28e
 1554 02cc 81000000 		.4byte	0x81
 1555 02d0 02       		.uleb128 0x2
 1556 02d1 91       		.byte	0x91
 1557 02d2 74       		.sleb128 -12
 1558 02d3 0D       		.uleb128 0xd
 1559 02d4 5E000000 		.4byte	.LASF45
 1560 02d8 01       		.byte	0x1
 1561 02d9 8E02     		.2byte	0x28e
 1562 02db 8C000000 		.4byte	0x8c
 1563 02df 02       		.uleb128 0x2
 1564 02e0 91       		.byte	0x91
 1565 02e1 72       		.sleb128 -14
 1566 02e2 00       		.byte	0
 1567 02e3 11       		.uleb128 0x11
 1568 02e4 8D020000 		.4byte	.LASF46
 1569 02e8 01       		.byte	0x1
 1570 02e9 B002     		.2byte	0x2b0
 1571 02eb 00000000 		.4byte	.LFB14
 1572 02ef 2C000000 		.4byte	.LFE14-.LFB14
 1573 02f3 01       		.uleb128 0x1
 1574 02f4 9C       		.byte	0x9c
 1575 02f5 18030000 		.4byte	0x318
 1576 02f9 0D       		.uleb128 0xd
 1577 02fa 63030000 		.4byte	.LASF33
 1578 02fe 01       		.byte	0x1
 1579 02ff B002     		.2byte	0x2b0
 1580 0301 81000000 		.4byte	0x81
 1581 0305 02       		.uleb128 0x2
 1582 0306 91       		.byte	0x91
 1583 0307 74       		.sleb128 -12
 1584 0308 0D       		.uleb128 0xd
 1585 0309 AC020000 		.4byte	.LASF47
 1586 030d 01       		.byte	0x1
 1587 030e B002     		.2byte	0x2b0
 1588 0310 97000000 		.4byte	0x97
 1589 0314 02       		.uleb128 0x2
 1590 0315 91       		.byte	0x91
 1591 0316 70       		.sleb128 -16
 1592 0317 00       		.byte	0
 1593 0318 0F       		.uleb128 0xf
 1594 0319 91030000 		.4byte	.LASF48
 1595 031d 01       		.byte	0x1
 1596 031e D102     		.2byte	0x2d1
 1597 0320 8C000000 		.4byte	0x8c
 1598 0324 00000000 		.4byte	.LFB15
 1599 0328 A4000000 		.4byte	.LFE15-.LFB15
 1600 032c 01       		.uleb128 0x1
 1601 032d 9C       		.byte	0x9c
 1602 032e 60030000 		.4byte	0x360
 1603 0332 0D       		.uleb128 0xd
 1604 0333 63030000 		.4byte	.LASF33
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 44


 1605 0337 01       		.byte	0x1
 1606 0338 D102     		.2byte	0x2d1
 1607 033a 81000000 		.4byte	0x81
 1608 033e 02       		.uleb128 0x2
 1609 033f 91       		.byte	0x91
 1610 0340 6C       		.sleb128 -20
 1611 0341 0D       		.uleb128 0xd
 1612 0342 BB020000 		.4byte	.LASF49
 1613 0346 01       		.byte	0x1
 1614 0347 D102     		.2byte	0x2d1
 1615 0349 8C000000 		.4byte	0x8c
 1616 034d 02       		.uleb128 0x2
 1617 034e 91       		.byte	0x91
 1618 034f 6A       		.sleb128 -22
 1619 0350 0E       		.uleb128 0xe
 1620 0351 68030000 		.4byte	.LASF50
 1621 0355 01       		.byte	0x1
 1622 0356 D302     		.2byte	0x2d3
 1623 0358 8C000000 		.4byte	0x8c
 1624 035c 02       		.uleb128 0x2
 1625 035d 91       		.byte	0x91
 1626 035e 76       		.sleb128 -10
 1627 035f 00       		.byte	0
 1628 0360 0F       		.uleb128 0xf
 1629 0361 D6000000 		.4byte	.LASF51
 1630 0365 01       		.byte	0x1
 1631 0366 0703     		.2byte	0x307
 1632 0368 97000000 		.4byte	0x97
 1633 036c 00000000 		.4byte	.LFB16
 1634 0370 98000000 		.4byte	.LFE16-.LFB16
 1635 0374 01       		.uleb128 0x1
 1636 0375 9C       		.byte	0x9c
 1637 0376 A8030000 		.4byte	0x3a8
 1638 037a 0D       		.uleb128 0xd
 1639 037b 63030000 		.4byte	.LASF33
 1640 037f 01       		.byte	0x1
 1641 0380 0703     		.2byte	0x307
 1642 0382 81000000 		.4byte	0x81
 1643 0386 02       		.uleb128 0x2
 1644 0387 91       		.byte	0x91
 1645 0388 64       		.sleb128 -28
 1646 0389 0D       		.uleb128 0xd
 1647 038a BB020000 		.4byte	.LASF49
 1648 038e 01       		.byte	0x1
 1649 038f 0703     		.2byte	0x307
 1650 0391 8C000000 		.4byte	0x8c
 1651 0395 02       		.uleb128 0x2
 1652 0396 91       		.byte	0x91
 1653 0397 62       		.sleb128 -30
 1654 0398 0E       		.uleb128 0xe
 1655 0399 AD000000 		.4byte	.LASF52
 1656 039d 01       		.byte	0x1
 1657 039e 0903     		.2byte	0x309
 1658 03a0 BB000000 		.4byte	0xbb
 1659 03a4 02       		.uleb128 0x2
 1660 03a5 91       		.byte	0x91
 1661 03a6 68       		.sleb128 -24
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 45


 1662 03a7 00       		.byte	0
 1663 03a8 0F       		.uleb128 0xf
 1664 03a9 70020000 		.4byte	.LASF53
 1665 03ad 01       		.byte	0x1
 1666 03ae 3403     		.2byte	0x334
 1667 03b0 A2000000 		.4byte	0xa2
 1668 03b4 00000000 		.4byte	.LFB17
 1669 03b8 80000000 		.4byte	.LFE17-.LFB17
 1670 03bc 01       		.uleb128 0x1
 1671 03bd 9C       		.byte	0x9c
 1672 03be F0030000 		.4byte	0x3f0
 1673 03c2 0D       		.uleb128 0xd
 1674 03c3 63030000 		.4byte	.LASF33
 1675 03c7 01       		.byte	0x1
 1676 03c8 3403     		.2byte	0x334
 1677 03ca 81000000 		.4byte	0x81
 1678 03ce 02       		.uleb128 0x2
 1679 03cf 91       		.byte	0x91
 1680 03d0 64       		.sleb128 -28
 1681 03d1 0D       		.uleb128 0xd
 1682 03d2 BB020000 		.4byte	.LASF49
 1683 03d6 01       		.byte	0x1
 1684 03d7 3403     		.2byte	0x334
 1685 03d9 8C000000 		.4byte	0x8c
 1686 03dd 02       		.uleb128 0x2
 1687 03de 91       		.byte	0x91
 1688 03df 62       		.sleb128 -30
 1689 03e0 0E       		.uleb128 0xe
 1690 03e1 5D030000 		.4byte	.LASF54
 1691 03e5 01       		.byte	0x1
 1692 03e6 3603     		.2byte	0x336
 1693 03e8 A2000000 		.4byte	0xa2
 1694 03ec 02       		.uleb128 0x2
 1695 03ed 91       		.byte	0x91
 1696 03ee 6C       		.sleb128 -20
 1697 03ef 00       		.byte	0
 1698 03f0 12       		.uleb128 0x12
 1699 03f1 81000000 		.4byte	0x81
 1700 03f5 00040000 		.4byte	0x400
 1701 03f9 13       		.uleb128 0x13
 1702 03fa DE000000 		.4byte	0xde
 1703 03fe 00       		.byte	0
 1704 03ff 00       		.byte	0
 1705 0400 09       		.uleb128 0x9
 1706 0401 38020000 		.4byte	.LASF55
 1707 0405 01       		.byte	0x1
 1708 0406 21       		.byte	0x21
 1709 0407 11040000 		.4byte	0x411
 1710 040b 05       		.uleb128 0x5
 1711 040c 03       		.byte	0x3
 1712 040d 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1713 0411 14       		.uleb128 0x14
 1714 0412 F0030000 		.4byte	0x3f0
 1715 0416 15       		.uleb128 0x15
 1716 0417 B4000000 		.4byte	.LASF56
 1717 041b 01       		.byte	0x1
 1718 041c 18       		.byte	0x18
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 46


 1719 041d 6B000000 		.4byte	0x6b
 1720 0421 05       		.uleb128 0x5
 1721 0422 03       		.byte	0x3
 1722 0423 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1723 0427 12       		.uleb128 0x12
 1724 0428 8C000000 		.4byte	0x8c
 1725 042c 37040000 		.4byte	0x437
 1726 0430 13       		.uleb128 0x13
 1727 0431 DE000000 		.4byte	0xde
 1728 0435 00       		.byte	0
 1729 0436 00       		.byte	0
 1730 0437 15       		.uleb128 0x15
 1731 0438 49000000 		.4byte	.LASF57
 1732 043c 01       		.byte	0x1
 1733 043d 19       		.byte	0x19
 1734 043e 48040000 		.4byte	0x448
 1735 0442 05       		.uleb128 0x5
 1736 0443 03       		.byte	0x3
 1737 0444 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1738 0448 06       		.uleb128 0x6
 1739 0449 27040000 		.4byte	0x427
 1740 044d 12       		.uleb128 0x12
 1741 044e 97000000 		.4byte	0x97
 1742 0452 5D040000 		.4byte	0x45d
 1743 0456 13       		.uleb128 0x13
 1744 0457 DE000000 		.4byte	0xde
 1745 045b 00       		.byte	0
 1746 045c 00       		.byte	0
 1747 045d 15       		.uleb128 0x15
 1748 045e 8F000000 		.4byte	.LASF58
 1749 0462 01       		.byte	0x1
 1750 0463 1A       		.byte	0x1a
 1751 0464 6E040000 		.4byte	0x46e
 1752 0468 05       		.uleb128 0x5
 1753 0469 03       		.byte	0x3
 1754 046a 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1755 046e 06       		.uleb128 0x6
 1756 046f 4D040000 		.4byte	0x44d
 1757 0473 00       		.byte	0
 1758              		.section	.debug_abbrev,"",%progbits
 1759              	.Ldebug_abbrev0:
 1760 0000 01       		.uleb128 0x1
 1761 0001 11       		.uleb128 0x11
 1762 0002 01       		.byte	0x1
 1763 0003 25       		.uleb128 0x25
 1764 0004 0E       		.uleb128 0xe
 1765 0005 13       		.uleb128 0x13
 1766 0006 0B       		.uleb128 0xb
 1767 0007 03       		.uleb128 0x3
 1768 0008 0E       		.uleb128 0xe
 1769 0009 1B       		.uleb128 0x1b
 1770 000a 0E       		.uleb128 0xe
 1771 000b 55       		.uleb128 0x55
 1772 000c 17       		.uleb128 0x17
 1773 000d 11       		.uleb128 0x11
 1774 000e 01       		.uleb128 0x1
 1775 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 47


 1776 0010 17       		.uleb128 0x17
 1777 0011 00       		.byte	0
 1778 0012 00       		.byte	0
 1779 0013 02       		.uleb128 0x2
 1780 0014 24       		.uleb128 0x24
 1781 0015 00       		.byte	0
 1782 0016 0B       		.uleb128 0xb
 1783 0017 0B       		.uleb128 0xb
 1784 0018 3E       		.uleb128 0x3e
 1785 0019 0B       		.uleb128 0xb
 1786 001a 03       		.uleb128 0x3
 1787 001b 0E       		.uleb128 0xe
 1788 001c 00       		.byte	0
 1789 001d 00       		.byte	0
 1790 001e 03       		.uleb128 0x3
 1791 001f 24       		.uleb128 0x24
 1792 0020 00       		.byte	0
 1793 0021 0B       		.uleb128 0xb
 1794 0022 0B       		.uleb128 0xb
 1795 0023 3E       		.uleb128 0x3e
 1796 0024 0B       		.uleb128 0xb
 1797 0025 03       		.uleb128 0x3
 1798 0026 08       		.uleb128 0x8
 1799 0027 00       		.byte	0
 1800 0028 00       		.byte	0
 1801 0029 04       		.uleb128 0x4
 1802 002a 16       		.uleb128 0x16
 1803 002b 00       		.byte	0
 1804 002c 03       		.uleb128 0x3
 1805 002d 0E       		.uleb128 0xe
 1806 002e 3A       		.uleb128 0x3a
 1807 002f 0B       		.uleb128 0xb
 1808 0030 3B       		.uleb128 0x3b
 1809 0031 0B       		.uleb128 0xb
 1810 0032 49       		.uleb128 0x49
 1811 0033 13       		.uleb128 0x13
 1812 0034 00       		.byte	0
 1813 0035 00       		.byte	0
 1814 0036 05       		.uleb128 0x5
 1815 0037 16       		.uleb128 0x16
 1816 0038 00       		.byte	0
 1817 0039 03       		.uleb128 0x3
 1818 003a 0E       		.uleb128 0xe
 1819 003b 3A       		.uleb128 0x3a
 1820 003c 0B       		.uleb128 0xb
 1821 003d 3B       		.uleb128 0x3b
 1822 003e 05       		.uleb128 0x5
 1823 003f 49       		.uleb128 0x49
 1824 0040 13       		.uleb128 0x13
 1825 0041 00       		.byte	0
 1826 0042 00       		.byte	0
 1827 0043 06       		.uleb128 0x6
 1828 0044 35       		.uleb128 0x35
 1829 0045 00       		.byte	0
 1830 0046 49       		.uleb128 0x49
 1831 0047 13       		.uleb128 0x13
 1832 0048 00       		.byte	0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 48


 1833 0049 00       		.byte	0
 1834 004a 07       		.uleb128 0x7
 1835 004b 2E       		.uleb128 0x2e
 1836 004c 00       		.byte	0
 1837 004d 3F       		.uleb128 0x3f
 1838 004e 19       		.uleb128 0x19
 1839 004f 03       		.uleb128 0x3
 1840 0050 0E       		.uleb128 0xe
 1841 0051 3A       		.uleb128 0x3a
 1842 0052 0B       		.uleb128 0xb
 1843 0053 3B       		.uleb128 0x3b
 1844 0054 0B       		.uleb128 0xb
 1845 0055 27       		.uleb128 0x27
 1846 0056 19       		.uleb128 0x19
 1847 0057 11       		.uleb128 0x11
 1848 0058 01       		.uleb128 0x1
 1849 0059 12       		.uleb128 0x12
 1850 005a 06       		.uleb128 0x6
 1851 005b 40       		.uleb128 0x40
 1852 005c 18       		.uleb128 0x18
 1853 005d 9642     		.uleb128 0x2116
 1854 005f 19       		.uleb128 0x19
 1855 0060 00       		.byte	0
 1856 0061 00       		.byte	0
 1857 0062 08       		.uleb128 0x8
 1858 0063 2E       		.uleb128 0x2e
 1859 0064 01       		.byte	0x1
 1860 0065 3F       		.uleb128 0x3f
 1861 0066 19       		.uleb128 0x19
 1862 0067 03       		.uleb128 0x3
 1863 0068 0E       		.uleb128 0xe
 1864 0069 3A       		.uleb128 0x3a
 1865 006a 0B       		.uleb128 0xb
 1866 006b 3B       		.uleb128 0x3b
 1867 006c 0B       		.uleb128 0xb
 1868 006d 27       		.uleb128 0x27
 1869 006e 19       		.uleb128 0x19
 1870 006f 11       		.uleb128 0x11
 1871 0070 01       		.uleb128 0x1
 1872 0071 12       		.uleb128 0x12
 1873 0072 06       		.uleb128 0x6
 1874 0073 40       		.uleb128 0x40
 1875 0074 18       		.uleb128 0x18
 1876 0075 9642     		.uleb128 0x2116
 1877 0077 19       		.uleb128 0x19
 1878 0078 01       		.uleb128 0x1
 1879 0079 13       		.uleb128 0x13
 1880 007a 00       		.byte	0
 1881 007b 00       		.byte	0
 1882 007c 09       		.uleb128 0x9
 1883 007d 34       		.uleb128 0x34
 1884 007e 00       		.byte	0
 1885 007f 03       		.uleb128 0x3
 1886 0080 0E       		.uleb128 0xe
 1887 0081 3A       		.uleb128 0x3a
 1888 0082 0B       		.uleb128 0xb
 1889 0083 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 49


 1890 0084 0B       		.uleb128 0xb
 1891 0085 49       		.uleb128 0x49
 1892 0086 13       		.uleb128 0x13
 1893 0087 02       		.uleb128 0x2
 1894 0088 18       		.uleb128 0x18
 1895 0089 00       		.byte	0
 1896 008a 00       		.byte	0
 1897 008b 0A       		.uleb128 0xa
 1898 008c 2E       		.uleb128 0x2e
 1899 008d 00       		.byte	0
 1900 008e 3F       		.uleb128 0x3f
 1901 008f 19       		.uleb128 0x19
 1902 0090 03       		.uleb128 0x3
 1903 0091 0E       		.uleb128 0xe
 1904 0092 3A       		.uleb128 0x3a
 1905 0093 0B       		.uleb128 0xb
 1906 0094 3B       		.uleb128 0x3b
 1907 0095 05       		.uleb128 0x5
 1908 0096 27       		.uleb128 0x27
 1909 0097 19       		.uleb128 0x19
 1910 0098 11       		.uleb128 0x11
 1911 0099 01       		.uleb128 0x1
 1912 009a 12       		.uleb128 0x12
 1913 009b 06       		.uleb128 0x6
 1914 009c 40       		.uleb128 0x40
 1915 009d 18       		.uleb128 0x18
 1916 009e 9642     		.uleb128 0x2116
 1917 00a0 19       		.uleb128 0x19
 1918 00a1 00       		.byte	0
 1919 00a2 00       		.byte	0
 1920 00a3 0B       		.uleb128 0xb
 1921 00a4 2E       		.uleb128 0x2e
 1922 00a5 00       		.byte	0
 1923 00a6 3F       		.uleb128 0x3f
 1924 00a7 19       		.uleb128 0x19
 1925 00a8 03       		.uleb128 0x3
 1926 00a9 0E       		.uleb128 0xe
 1927 00aa 3A       		.uleb128 0x3a
 1928 00ab 0B       		.uleb128 0xb
 1929 00ac 3B       		.uleb128 0x3b
 1930 00ad 05       		.uleb128 0x5
 1931 00ae 27       		.uleb128 0x27
 1932 00af 19       		.uleb128 0x19
 1933 00b0 11       		.uleb128 0x11
 1934 00b1 01       		.uleb128 0x1
 1935 00b2 12       		.uleb128 0x12
 1936 00b3 06       		.uleb128 0x6
 1937 00b4 40       		.uleb128 0x40
 1938 00b5 18       		.uleb128 0x18
 1939 00b6 9742     		.uleb128 0x2117
 1940 00b8 19       		.uleb128 0x19
 1941 00b9 00       		.byte	0
 1942 00ba 00       		.byte	0
 1943 00bb 0C       		.uleb128 0xc
 1944 00bc 2E       		.uleb128 0x2e
 1945 00bd 01       		.byte	0x1
 1946 00be 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 50


 1947 00bf 19       		.uleb128 0x19
 1948 00c0 03       		.uleb128 0x3
 1949 00c1 0E       		.uleb128 0xe
 1950 00c2 3A       		.uleb128 0x3a
 1951 00c3 0B       		.uleb128 0xb
 1952 00c4 3B       		.uleb128 0x3b
 1953 00c5 05       		.uleb128 0x5
 1954 00c6 27       		.uleb128 0x27
 1955 00c7 19       		.uleb128 0x19
 1956 00c8 49       		.uleb128 0x49
 1957 00c9 13       		.uleb128 0x13
 1958 00ca 11       		.uleb128 0x11
 1959 00cb 01       		.uleb128 0x1
 1960 00cc 12       		.uleb128 0x12
 1961 00cd 06       		.uleb128 0x6
 1962 00ce 40       		.uleb128 0x40
 1963 00cf 18       		.uleb128 0x18
 1964 00d0 9742     		.uleb128 0x2117
 1965 00d2 19       		.uleb128 0x19
 1966 00d3 01       		.uleb128 0x1
 1967 00d4 13       		.uleb128 0x13
 1968 00d5 00       		.byte	0
 1969 00d6 00       		.byte	0
 1970 00d7 0D       		.uleb128 0xd
 1971 00d8 05       		.uleb128 0x5
 1972 00d9 00       		.byte	0
 1973 00da 03       		.uleb128 0x3
 1974 00db 0E       		.uleb128 0xe
 1975 00dc 3A       		.uleb128 0x3a
 1976 00dd 0B       		.uleb128 0xb
 1977 00de 3B       		.uleb128 0x3b
 1978 00df 05       		.uleb128 0x5
 1979 00e0 49       		.uleb128 0x49
 1980 00e1 13       		.uleb128 0x13
 1981 00e2 02       		.uleb128 0x2
 1982 00e3 18       		.uleb128 0x18
 1983 00e4 00       		.byte	0
 1984 00e5 00       		.byte	0
 1985 00e6 0E       		.uleb128 0xe
 1986 00e7 34       		.uleb128 0x34
 1987 00e8 00       		.byte	0
 1988 00e9 03       		.uleb128 0x3
 1989 00ea 0E       		.uleb128 0xe
 1990 00eb 3A       		.uleb128 0x3a
 1991 00ec 0B       		.uleb128 0xb
 1992 00ed 3B       		.uleb128 0x3b
 1993 00ee 05       		.uleb128 0x5
 1994 00ef 49       		.uleb128 0x49
 1995 00f0 13       		.uleb128 0x13
 1996 00f1 02       		.uleb128 0x2
 1997 00f2 18       		.uleb128 0x18
 1998 00f3 00       		.byte	0
 1999 00f4 00       		.byte	0
 2000 00f5 0F       		.uleb128 0xf
 2001 00f6 2E       		.uleb128 0x2e
 2002 00f7 01       		.byte	0x1
 2003 00f8 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 51


 2004 00f9 19       		.uleb128 0x19
 2005 00fa 03       		.uleb128 0x3
 2006 00fb 0E       		.uleb128 0xe
 2007 00fc 3A       		.uleb128 0x3a
 2008 00fd 0B       		.uleb128 0xb
 2009 00fe 3B       		.uleb128 0x3b
 2010 00ff 05       		.uleb128 0x5
 2011 0100 27       		.uleb128 0x27
 2012 0101 19       		.uleb128 0x19
 2013 0102 49       		.uleb128 0x49
 2014 0103 13       		.uleb128 0x13
 2015 0104 11       		.uleb128 0x11
 2016 0105 01       		.uleb128 0x1
 2017 0106 12       		.uleb128 0x12
 2018 0107 06       		.uleb128 0x6
 2019 0108 40       		.uleb128 0x40
 2020 0109 18       		.uleb128 0x18
 2021 010a 9642     		.uleb128 0x2116
 2022 010c 19       		.uleb128 0x19
 2023 010d 01       		.uleb128 0x1
 2024 010e 13       		.uleb128 0x13
 2025 010f 00       		.byte	0
 2026 0110 00       		.byte	0
 2027 0111 10       		.uleb128 0x10
 2028 0112 2E       		.uleb128 0x2e
 2029 0113 01       		.byte	0x1
 2030 0114 3F       		.uleb128 0x3f
 2031 0115 19       		.uleb128 0x19
 2032 0116 03       		.uleb128 0x3
 2033 0117 0E       		.uleb128 0xe
 2034 0118 3A       		.uleb128 0x3a
 2035 0119 0B       		.uleb128 0xb
 2036 011a 3B       		.uleb128 0x3b
 2037 011b 05       		.uleb128 0x5
 2038 011c 27       		.uleb128 0x27
 2039 011d 19       		.uleb128 0x19
 2040 011e 11       		.uleb128 0x11
 2041 011f 01       		.uleb128 0x1
 2042 0120 12       		.uleb128 0x12
 2043 0121 06       		.uleb128 0x6
 2044 0122 40       		.uleb128 0x40
 2045 0123 18       		.uleb128 0x18
 2046 0124 9742     		.uleb128 0x2117
 2047 0126 19       		.uleb128 0x19
 2048 0127 01       		.uleb128 0x1
 2049 0128 13       		.uleb128 0x13
 2050 0129 00       		.byte	0
 2051 012a 00       		.byte	0
 2052 012b 11       		.uleb128 0x11
 2053 012c 2E       		.uleb128 0x2e
 2054 012d 01       		.byte	0x1
 2055 012e 3F       		.uleb128 0x3f
 2056 012f 19       		.uleb128 0x19
 2057 0130 03       		.uleb128 0x3
 2058 0131 0E       		.uleb128 0xe
 2059 0132 3A       		.uleb128 0x3a
 2060 0133 0B       		.uleb128 0xb
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 52


 2061 0134 3B       		.uleb128 0x3b
 2062 0135 05       		.uleb128 0x5
 2063 0136 27       		.uleb128 0x27
 2064 0137 19       		.uleb128 0x19
 2065 0138 11       		.uleb128 0x11
 2066 0139 01       		.uleb128 0x1
 2067 013a 12       		.uleb128 0x12
 2068 013b 06       		.uleb128 0x6
 2069 013c 40       		.uleb128 0x40
 2070 013d 18       		.uleb128 0x18
 2071 013e 9642     		.uleb128 0x2116
 2072 0140 19       		.uleb128 0x19
 2073 0141 01       		.uleb128 0x1
 2074 0142 13       		.uleb128 0x13
 2075 0143 00       		.byte	0
 2076 0144 00       		.byte	0
 2077 0145 12       		.uleb128 0x12
 2078 0146 01       		.uleb128 0x1
 2079 0147 01       		.byte	0x1
 2080 0148 49       		.uleb128 0x49
 2081 0149 13       		.uleb128 0x13
 2082 014a 01       		.uleb128 0x1
 2083 014b 13       		.uleb128 0x13
 2084 014c 00       		.byte	0
 2085 014d 00       		.byte	0
 2086 014e 13       		.uleb128 0x13
 2087 014f 21       		.uleb128 0x21
 2088 0150 00       		.byte	0
 2089 0151 49       		.uleb128 0x49
 2090 0152 13       		.uleb128 0x13
 2091 0153 2F       		.uleb128 0x2f
 2092 0154 0B       		.uleb128 0xb
 2093 0155 00       		.byte	0
 2094 0156 00       		.byte	0
 2095 0157 14       		.uleb128 0x14
 2096 0158 26       		.uleb128 0x26
 2097 0159 00       		.byte	0
 2098 015a 49       		.uleb128 0x49
 2099 015b 13       		.uleb128 0x13
 2100 015c 00       		.byte	0
 2101 015d 00       		.byte	0
 2102 015e 15       		.uleb128 0x15
 2103 015f 34       		.uleb128 0x34
 2104 0160 00       		.byte	0
 2105 0161 03       		.uleb128 0x3
 2106 0162 0E       		.uleb128 0xe
 2107 0163 3A       		.uleb128 0x3a
 2108 0164 0B       		.uleb128 0xb
 2109 0165 3B       		.uleb128 0x3b
 2110 0166 0B       		.uleb128 0xb
 2111 0167 49       		.uleb128 0x49
 2112 0168 13       		.uleb128 0x13
 2113 0169 3F       		.uleb128 0x3f
 2114 016a 19       		.uleb128 0x19
 2115 016b 02       		.uleb128 0x2
 2116 016c 18       		.uleb128 0x18
 2117 016d 00       		.byte	0
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 53


 2118 016e 00       		.byte	0
 2119 016f 00       		.byte	0
 2120              		.section	.debug_aranges,"",%progbits
 2121 0000 A4000000 		.4byte	0xa4
 2122 0004 0200     		.2byte	0x2
 2123 0006 00000000 		.4byte	.Ldebug_info0
 2124 000a 04       		.byte	0x4
 2125 000b 00       		.byte	0
 2126 000c 0000     		.2byte	0
 2127 000e 0000     		.2byte	0
 2128 0010 00000000 		.4byte	.LFB0
 2129 0014 24000000 		.4byte	.LFE0-.LFB0
 2130 0018 00000000 		.4byte	.LFB1
 2131 001c AC010000 		.4byte	.LFE1-.LFB1
 2132 0020 00000000 		.4byte	.LFB2
 2133 0024 28000000 		.4byte	.LFE2-.LFB2
 2134 0028 00000000 		.4byte	.LFB3
 2135 002c 18000000 		.4byte	.LFE3-.LFB3
 2136 0030 00000000 		.4byte	.LFB4
 2137 0034 1C000000 		.4byte	.LFE4-.LFB4
 2138 0038 00000000 		.4byte	.LFB5
 2139 003c 1C000000 		.4byte	.LFE5-.LFB5
 2140 0040 00000000 		.4byte	.LFB6
 2141 0044 48000000 		.4byte	.LFE6-.LFB6
 2142 0048 00000000 		.4byte	.LFB7
 2143 004c 44000000 		.4byte	.LFE7-.LFB7
 2144 0050 00000000 		.4byte	.LFB8
 2145 0054 1C000000 		.4byte	.LFE8-.LFB8
 2146 0058 00000000 		.4byte	.LFB9
 2147 005c 30000000 		.4byte	.LFE9-.LFB9
 2148 0060 00000000 		.4byte	.LFB10
 2149 0064 2C000000 		.4byte	.LFE10-.LFB10
 2150 0068 00000000 		.4byte	.LFB11
 2151 006c 1C000000 		.4byte	.LFE11-.LFB11
 2152 0070 00000000 		.4byte	.LFB12
 2153 0074 1C000000 		.4byte	.LFE12-.LFB12
 2154 0078 00000000 		.4byte	.LFB13
 2155 007c 30000000 		.4byte	.LFE13-.LFB13
 2156 0080 00000000 		.4byte	.LFB14
 2157 0084 2C000000 		.4byte	.LFE14-.LFB14
 2158 0088 00000000 		.4byte	.LFB15
 2159 008c A4000000 		.4byte	.LFE15-.LFB15
 2160 0090 00000000 		.4byte	.LFB16
 2161 0094 98000000 		.4byte	.LFE16-.LFB16
 2162 0098 00000000 		.4byte	.LFB17
 2163 009c 80000000 		.4byte	.LFE17-.LFB17
 2164 00a0 00000000 		.4byte	0
 2165 00a4 00000000 		.4byte	0
 2166              		.section	.debug_ranges,"",%progbits
 2167              	.Ldebug_ranges0:
 2168 0000 00000000 		.4byte	.LFB0
 2169 0004 24000000 		.4byte	.LFE0
 2170 0008 00000000 		.4byte	.LFB1
 2171 000c AC010000 		.4byte	.LFE1
 2172 0010 00000000 		.4byte	.LFB2
 2173 0014 28000000 		.4byte	.LFE2
 2174 0018 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 54


 2175 001c 18000000 		.4byte	.LFE3
 2176 0020 00000000 		.4byte	.LFB4
 2177 0024 1C000000 		.4byte	.LFE4
 2178 0028 00000000 		.4byte	.LFB5
 2179 002c 1C000000 		.4byte	.LFE5
 2180 0030 00000000 		.4byte	.LFB6
 2181 0034 48000000 		.4byte	.LFE6
 2182 0038 00000000 		.4byte	.LFB7
 2183 003c 44000000 		.4byte	.LFE7
 2184 0040 00000000 		.4byte	.LFB8
 2185 0044 1C000000 		.4byte	.LFE8
 2186 0048 00000000 		.4byte	.LFB9
 2187 004c 30000000 		.4byte	.LFE9
 2188 0050 00000000 		.4byte	.LFB10
 2189 0054 2C000000 		.4byte	.LFE10
 2190 0058 00000000 		.4byte	.LFB11
 2191 005c 1C000000 		.4byte	.LFE11
 2192 0060 00000000 		.4byte	.LFB12
 2193 0064 1C000000 		.4byte	.LFE12
 2194 0068 00000000 		.4byte	.LFB13
 2195 006c 30000000 		.4byte	.LFE13
 2196 0070 00000000 		.4byte	.LFB14
 2197 0074 2C000000 		.4byte	.LFE14
 2198 0078 00000000 		.4byte	.LFB15
 2199 007c A4000000 		.4byte	.LFE15
 2200 0080 00000000 		.4byte	.LFB16
 2201 0084 98000000 		.4byte	.LFE16
 2202 0088 00000000 		.4byte	.LFB17
 2203 008c 80000000 		.4byte	.LFE17
 2204 0090 00000000 		.4byte	0
 2205 0094 00000000 		.4byte	0
 2206              		.section	.debug_line,"",%progbits
 2207              	.Ldebug_line0:
 2208 0000 37020000 		.section	.debug_str,"MS",%progbits,1
 2208      02004C00 
 2208      00000201 
 2208      FB0E0D00 
 2208      01010101 
 2209              	.LASF28:
 2210 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2210      5341525F 
 2210      5365715F 
 2210      315F5374 
 2210      6F70436F 
 2211              	.LASF19:
 2212 001a 72656733 		.ascii	"reg32\000"
 2212      3200
 2213              	.LASF60:
 2214 0020 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2214      6E657261 
 2214      7465645F 
 2214      536F7572 
 2214      63655C50 
 2215              	.LASF57:
 2216 0049 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2216      5341525F 
 2216      5365715F 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 55


 2216      315F6F66 
 2216      66736574 
 2217              	.LASF45:
 2218 005e 6F666673 		.ascii	"offset\000"
 2218      657400
 2219              	.LASF15:
 2220 0065 666C6F61 		.ascii	"float\000"
 2220      7400
 2221              	.LASF41:
 2222 006b 68696768 		.ascii	"highLimit\000"
 2222      4C696D69 
 2222      7400
 2223              	.LASF38:
 2224 0075 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2224      5341525F 
 2224      5365715F 
 2224      315F5365 
 2224      744C6F77 
 2225              	.LASF58:
 2226 008f 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2226      5341525F 
 2226      5365715F 
 2226      315F636F 
 2226      756E7473 
 2227              	.LASF52:
 2228 00ad 75566F6C 		.ascii	"uVolts\000"
 2228      747300
 2229              	.LASF56:
 2230 00b4 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2230      5341525F 
 2230      5365715F 
 2230      315F696E 
 2230      69745661 
 2231              	.LASF18:
 2232 00ca 63686172 		.ascii	"char\000"
 2232      00
 2233              	.LASF29:
 2234 00cf 73746174 		.ascii	"status\000"
 2234      757300
 2235              	.LASF51:
 2236 00d6 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2236      5341525F 
 2236      5365715F 
 2236      315F436F 
 2236      756E7473 
 2237              	.LASF14:
 2238 00f4 666C6F61 		.ascii	"float32\000"
 2238      74333200 
 2239              	.LASF22:
 2240 00fc 746D7052 		.ascii	"tmpRegVal\000"
 2240      65675661 
 2240      6C00
 2241              	.LASF59:
 2242 0106 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2242      4320342E 
 2242      382E3420 
 2242      32303134 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 56


 2242      30353236 
 2243 0139 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2243      20726576 
 2243      6973696F 
 2243      6E203231 
 2243      31333538 
 2244 016c 30202D66 		.ascii	"0 -ffunction-sections\000"
 2244      66756E63 
 2244      74696F6E 
 2244      2D736563 
 2244      74696F6E 
 2245              	.LASF61:
 2246 0182 433A5C55 		.ascii	"C:\\Users\\Karsten\\Desktop\\IHA\\3. Semester\\Proj"
 2246      73657273 
 2246      5C4B6172 
 2246      7374656E 
 2246      5C446573 
 2247 01af 656B745C 		.ascii	"ekt\\PHProbe\\PHProbe.cydsn\000"
 2247      50485072 
 2247      6F62655C 
 2247      50485072 
 2247      6F62652E 
 2248              	.LASF1:
 2249 01c9 756E7369 		.ascii	"unsigned char\000"
 2249      676E6564 
 2249      20636861 
 2249      7200
 2250              	.LASF26:
 2251 01d7 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2251      5341525F 
 2251      5365715F 
 2251      315F5374 
 2251      6F7000
 2252              	.LASF40:
 2253 01ea 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2253      5341525F 
 2253      5365715F 
 2253      315F5365 
 2253      74486967 
 2254              	.LASF12:
 2255 0205 696E7431 		.ascii	"int16\000"
 2255      3600
 2256              	.LASF5:
 2257 020b 6C6F6E67 		.ascii	"long unsigned int\000"
 2257      20756E73 
 2257      69676E65 
 2257      6420696E 
 2257      7400
 2258              	.LASF13:
 2259 021d 696E7433 		.ascii	"int32\000"
 2259      3200
 2260              	.LASF25:
 2261 0223 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2261      5341525F 
 2261      5365715F 
 2261      315F456E 
 2261      61626C65 
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 57


 2262              	.LASF55:
 2263 0238 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2263      5341525F 
 2263      5365715F 
 2263      315F6368 
 2263      616E6E65 
 2264              	.LASF24:
 2265 0255 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2265      5341525F 
 2265      5365715F 
 2265      315F5374 
 2265      61727400 
 2266              	.LASF16:
 2267 0269 646F7562 		.ascii	"double\000"
 2267      6C6500
 2268              	.LASF53:
 2269 0270 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2269      5341525F 
 2269      5365715F 
 2269      315F436F 
 2269      756E7473 
 2270              	.LASF46:
 2271 028d 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2271      5341525F 
 2271      5365715F 
 2271      315F5365 
 2271      74476169 
 2272              	.LASF39:
 2273 02a3 6C6F774C 		.ascii	"lowLimit\000"
 2273      696D6974 
 2273      00
 2274              	.LASF47:
 2275 02ac 61646347 		.ascii	"adcGain\000"
 2275      61696E00 
 2276              	.LASF10:
 2277 02b4 75696E74 		.ascii	"uint16\000"
 2277      313600
 2278              	.LASF49:
 2279 02bb 61646343 		.ascii	"adcCounts\000"
 2279      6F756E74 
 2279      7300
 2280              	.LASF11:
 2281 02c5 75696E74 		.ascii	"uint32\000"
 2281      333200
 2282              	.LASF43:
 2283 02cc 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2283      5341525F 
 2283      5365715F 
 2283      315F5365 
 2283      74536174 
 2284              	.LASF8:
 2285 02e5 756E7369 		.ascii	"unsigned int\000"
 2285      676E6564 
 2285      20696E74 
 2285      00
 2286              	.LASF27:
 2287 02f2 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 58


 2287      5341525F 
 2287      5365715F 
 2287      315F5374 
 2287      61727443 
 2288              	.LASF23:
 2289 030d 636F756E 		.ascii	"counts\000"
 2289      747300
 2290              	.LASF7:
 2291 0314 6C6F6E67 		.ascii	"long long unsigned int\000"
 2291      206C6F6E 
 2291      6720756E 
 2291      7369676E 
 2291      65642069 
 2292              	.LASF44:
 2293 032b 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2293      5341525F 
 2293      5365715F 
 2293      315F5365 
 2293      744F6666 
 2294              	.LASF36:
 2295 0343 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2295      5341525F 
 2295      5365715F 
 2295      315F5365 
 2295      74436861 
 2296              	.LASF54:
 2297 035d 766F6C74 		.ascii	"volts\000"
 2297      7300
 2298              	.LASF33:
 2299 0363 6368616E 		.ascii	"chan\000"
 2299      00
 2300              	.LASF50:
 2301 0368 6D566F6C 		.ascii	"mVolts\000"
 2301      747300
 2302              	.LASF20:
 2303 036f 73697A65 		.ascii	"sizetype\000"
 2303      74797065 
 2303      00
 2304              	.LASF6:
 2305 0378 6C6F6E67 		.ascii	"long long int\000"
 2305      206C6F6E 
 2305      6720696E 
 2305      7400
 2306              	.LASF37:
 2307 0386 6D61736B 		.ascii	"mask\000"
 2307      00
 2308              	.LASF21:
 2309 038b 63684E75 		.ascii	"chNum\000"
 2309      6D00
 2310              	.LASF48:
 2311 0391 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2311      5341525F 
 2311      5365715F 
 2311      315F436F 
 2311      756E7473 
 2312              	.LASF32:
 2313 03af 7265744D 		.ascii	"retMode\000"
ARM GAS  C:\Users\Karsten\AppData\Local\Temp\ccNlGTuF.s 			page 59


 2313      6F646500 
 2314              	.LASF2:
 2315 03b7 73686F72 		.ascii	"short int\000"
 2315      7420696E 
 2315      7400
 2316              	.LASF9:
 2317 03c1 75696E74 		.ascii	"uint8\000"
 2317      3800
 2318              	.LASF42:
 2319 03c7 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2319      5341525F 
 2319      5365715F 
 2319      315F5365 
 2319      744C696D 
 2320              	.LASF4:
 2321 03e2 6C6F6E67 		.ascii	"long int\000"
 2321      20696E74 
 2321      00
 2322              	.LASF30:
 2323 03eb 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2323      5341525F 
 2323      5365715F 
 2323      315F4973 
 2323      456E6443 
 2324              	.LASF0:
 2325 0409 7369676E 		.ascii	"signed char\000"
 2325      65642063 
 2325      68617200 
 2326              	.LASF3:
 2327 0415 73686F72 		.ascii	"short unsigned int\000"
 2327      7420756E 
 2327      7369676E 
 2327      65642069 
 2327      6E7400
 2328              	.LASF34:
 2329 0428 72657375 		.ascii	"result\000"
 2329      6C7400
 2330              	.LASF17:
 2331 042f 696E7436 		.ascii	"int64\000"
 2331      3400
 2332              	.LASF35:
 2333 0435 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2333      5341525F 
 2333      5365715F 
 2333      315F496E 
 2333      697400
 2334              	.LASF31:
 2335 0448 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2335      5341525F 
 2335      5365715F 
 2335      315F4765 
 2335      74526573 
 2336              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
